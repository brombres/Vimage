module Vimage
uses Console/ConsoleUI
uses UI

class VimageUI : ConsoleUI [singleton]
  PROPERTIES
    image_list_scroller : UIScrollView
    repeat_count        : Int32?
    command             = String()
    cmd_line_handlers   = [String:CmdLineHandler]
    last_input_timer    = Timer()
    actions             : Action

  METHODS
    method init
      prior.init

      register( CmdLineAnchor )
      register( CmdLineAspect )
      register( CmdLineBG )
      register( CmdLineCopy )
      register( CmdLineCrop )
      register( CmdLineFill )
      register( CmdLineFit )
      register( CmdLineHardAlpha )
      register( CmdLineJoin )
      register( CmdLineLiteralBitwiseAND )
      register( CmdLineLiteralBitwiseOR  )
      register( CmdLineLiteralBitwiseROL )
      register( CmdLineLiteralBitwiseROR )
      register( CmdLineLiteralBitwiseXOR )
      register( CmdLineNew )
      register( CmdLineQuit )
      register( CmdLineQuitAll )
      register( CmdLineForceQuit )
      register( CmdLineForceQuitAll )
      register( CmdLineResize )
      register( CmdLineSplit )
      register( CmdLineSwap )
      register( CmdLineWrite )
      register( CmdLineWriteAll )

      State.current.change_state( ImageListState )

      image_list_scroller = ImageListScrollView( ImageList ).[ shrink_to_fit_width ]
      local layout = (image_list_scroller + ImageView)
      layout /= TitleBar
      layout /= StatusBar
      add( layout )

    method on( e:KeyEvent )
      last_input_timer.restart

      if (e.is_press(Keycode.ESCAPE) and actions)
        actions = null
        StatusBar.text = "[command cancelled]"
        return
      endIf

      State.current.on( e )

    method on( e:PointerEvent )
      last_input_timer.restart
      prior.on( e )

    method on( e:ScrollEvent )
      last_input_timer.restart
      prior.on( e )

    method on_resize
      ImageView.show( ImageView.image )

    method register( cmd_handler:CmdLineHandler )
      cmd_line_handlers[cmd_handler.keyword] = cmd_handler

    method show( image:Image )
      TitleBar.show( image )
      ImageView.show( image )

    method on_update [override]
      prior.on_update

      if (actions)
        actions .= update
        ensure_rapid_updates( 2 )
      endIf

      # Load another image, if necessary, during user input downtime
      if (last_input_timer.elapsed_ms >= 1000)
        forEach (item in ImageList)
          local image = item->(as ImageListItem).image
          if (not image.@bitmap)
            image.bitmap
            ensure_rapid_updates( 2 )
            escapeForEach
          endIf
        endForEach
      endIf

endClass
