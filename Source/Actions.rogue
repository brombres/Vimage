library Vimage

class ActionApplyAll : Action
  PROPERTIES
    cmd         : CmdApplyAll
    is_finished : Logical

  METHODS
    method init( cmd )
      prior.init

    method is_finished->Logical [override]
      return @is_finished

    method on_update [override]
      contingent
        if (ImageList.selected.image.zoom == 0) return  # wait for zoom parameters to be set during redraw

        necessary (ImageList.selected)
        local index = ImageList.selected.index
        forEach (macro_cmd in Vimage.macro) Vimage.execute( macro_cmd, &skip_undo_save_state )
        necessary (index+1 < ImageList.count)
        ImageList.select( index + 1 )
      unsatisfied
        is_finished = true
        Vimage.last_cmd = cmd
      endContingent
endClass

class ActionWriteAll : Action
  PROPERTIES
    cmd         : CmdWriteAll
    is_finished : Logical
    index       = 0

  METHODS
    method init( cmd )
      prior.init

    method is_finished->Logical [override]
      return @is_finished

    method on_update [override]
      local has_unnamed = false

      forEach (i in index..<ImageList.count)
        local item = ImageList[i]->(as ImageListItem)
        if (item.image.is_modified)
          has_unnamed = true
          if (item.image.file)
            ImageList.select( i )
            CmdWrite.execute
            return
          endIf
        endIf
      endForEach

      if (has_unnamed)
        forEach (i in index..<ImageList.count)
          local item = ImageList[i]->(as ImageListItem)
          if (item.image.is_modified)
            ImageList.select( i )
            CmdWrite.execute
            escapeForEach
          endIf
        endForEach
      endIf

      is_finished = true
      Vimage.last_cmd = cmd
endClass
