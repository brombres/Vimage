module Vimage
uses Console/ANSIBitmap
uses UI

class ImageView : UIComponent [singleton]
  PROPERTIES
    image            : Image
    canvas           : TextCanvas
    scale_to_fit     = true
    min_zoom         : Real64
    max_zoom         : Real64
    default_zoom     : Real64
    is_modified      : Logical
    visible_bounds   : IntBox
    camera_bounds_tl : XY
    camera_bounds_br : XY

  METHODS
    method init

    method on_draw
      localize display_bounds

      local bg = CharacterStyle( CharacterStyle.BG_DARK_GRAY ).bg( Color(0xFF444444) )

      if (image)
        if (is_modified)
          is_modified = false
          visible_bounds = IntBox( image.bitmap.size )
          local new_size : XY
          if (min_zoom)
            new_size = (image.bitmap.size->XY * image.zoom)
          else
            local scale = ((display_bounds.size->XY*XY(1,2)) / image.bitmap.size->XY).min
            new_size = (image.bitmap.size->XY * scale)
            default_zoom = (new_size.x->Real64 / image.bitmap.width)
            min_zoom = default_zoom.or_smaller( 1.0 )
            max_zoom = which{ default_zoom>1.0:default_zoom || 1.0 }
            if (image.zoom)
              if (image.zoom < min_zoom)
                image.zoom = min_zoom
                image.camera = XY(0.5,0.5)
              else
                new_size = (image.bitmap.size->XY * image.zoom)
              endIf
            else
              image.zoom = default_zoom
            endIf
          endIf

          local sz = (display_bounds.size * IntXY(1,2))->XY
          sz = (sz / image.zoom).clamped_high( image.size ) / image.size
          camera_bounds_tl = (sz / 2) - XY(1,2)/image.size
          camera_bounds_br = (XY(1,1) - sz/2)
          image.camera .= clamped( camera_bounds_tl, camera_bounds_br )

          TitleBar.zoom = image.zoom
          canvas = image.text_canvas( new_size, display_bounds )
        endIf

        ConsoleUICanvas.fill( display_bounds, StyledCharacter(' ',bg) )

        temporarily ConsoleUICanvas.clip = display_bounds
          local sz = canvas.size
          local pos = IntBox( display_bounds.center - (sz/2), sz ).clamped( display_bounds ).top_left
          ConsoleUICanvas.draw( canvas, pos )
        endTemporarily

      else
        ConsoleUICanvas.fill( display_bounds, StyledCharacter(' ',bg) )

      endIf

    method mark_modified
      is_modified = true
      request_redraw

    method reset_zoom
      if (image)
        if (image.zoom != default_zoom)
          image.zoom = default_zoom
          image.camera = XY(0.5,0.5)
          TitleBar.zoom = image.zoom
          mark_modified
        endIf
      endIf

    method scroll( delta:XY )
      delta *= XY(1,2)
      if (image)
        if (image.zoom == default_zoom)
          image.camera = XY(0.5,0.5)
        elseIf (image.zoom)
          delta *= display_bounds.size / (image.bitmap.size * image.zoom)
          image.camera = (image.camera + delta).clamped( 0.0, 1.0 )
        endIf
        mark_modified
      endIf

    method show( new_image:Image )
      if (image and image.zoom == default_zoom) image.zoom = 0

      image = new_image
      min_zoom = 0
      default_zoom = 0
      scale_to_fit = true
      mark_modified

    method zoom_in
      if (image)
        if (image.zoom < max_zoom)
          image.zoom *= 2
          if (image.zoom >= max_zoom)
            image.zoom = max_zoom
          else
            local n = 0
            while (image.zoom < max_zoom)
              ++n
              image.zoom *= 2
            endWhile
            image.zoom = max_zoom
            loop (n) image.zoom /= 2
          endIf
        endIf
        TitleBar.zoom = image.zoom
        mark_modified
      endIf

    method zoom_out
      if (image)
        if (image.zoom > min_zoom)
          image.zoom /= 2
          if (image.zoom < min_zoom)
            image.zoom = min_zoom
            image.camera = XY(0.5,0.5)
          endIf
        endIf
        TitleBar.zoom = image.zoom
        mark_modified
      endIf
endClass
