library Vimage
uses UI

class ImageList : VList [singleton]
  PROPERTIES
    selected : ImageListItem
    is_dim   : Logical

    fixed_width = 21

  METHODS
    method init
      prior.init
      on_resize

    method add( image:Image )
      add( ImageListItem(image) )
      request_layout

    method after_draw
      if (is_dim) ConsoleUICanvas.style.dim_off

    method contains( file:File )->Logical
      file .= abs
      forEach (child in children)
        local image = child->(as ImageListItem).image
        if (image.file and image.file.value.abs == file) return true
      endForEach
      return false

    method find( file:File )->ImageListItem
      file .= abs
      forEach (child in children)
        local image = child->(as ImageListItem).image
        if (image.file and image.file.value.abs == file.filepath)
          return child->(as ImageListItem)
        endIf
      endForEach
      return null

    method insert( image:Image, before_index=0:Int )
      insert( ImageListItem(image), before_index )
      request_layout

    method make_filepath_unique( file:File )->File
      local filepath = file.filepath
      if (not is_filepath_used(filepath)) return file

      local ext = file.extension
      local existing_suffix = filepath.extract_string( "*-$(I).$"('$',ext) )
      if (existing_suffix)
        filepath .= before_last( "-"+existing_suffix )
      else
        existing_suffix = filepath.extract_string( "*_$(I).$"('$',ext) )
        if (existing_suffix)
          filepath .= before_last( "_"+existing_suffix )
        else
          filepath = File(filepath).without_extension
        endIf
      endIf

      local suffix = 2
      local candidate = "$_$.$"(File(filepath),suffix,ext)
      while (is_filepath_used(candidate))
        ++suffix
        candidate = "$_$.$"(File(filepath),suffix,ext)
      endWhile

      return File(candidate)

    method is_filepath_used( filepath:String )->Logical
      forEach (child in children)
        if local item = child->(as ImageListItem)
          if local existing_file = item.image.file
            if (existing_file.filepath == filepath) return true
          endIf
        endIf
      endForEach
      return false

    method on_draw
      if (is_dim) ConsoleUICanvas.style.dim

    method on_resize
      @fixed_width = (Console.width / 4 + 1).clamped( 21, 33 )
      fixed_width = fixed_width

    method on_update_layout
      fixed_height = count

    method remove_selected
      if (not selected) return
      local next = selected.next
      remove( selected )
      if (next)
        select( next->(as ImageListItem) )
      elseIf (count)
        select( last_child->(as ImageListItem) )
      else
        select( null )
      endIf

    method scroll_view->ImageListScrollView
      local view = parent
      while (view)
        if local result = view->(as ImageListScrollView)
          return result
        endIf
        view .= parent
      endWhile
      return null

    method select( index:Int )
      local item = this[index]->(as ImageListItem)
      if (item) select( item )

    method select( image:Image )
      forEach (child in children)
        if local item = child->(as ImageListItem)
          if (item.image is image)
            select( item )
            return
          endIf
        endIf
      endForEach

    method select( item:Component )
      select( item->(as ImageListItem) )

    method select( item:ImageListItem ) [preferred]
      if (selected)
        selected.deselect
        selected.request_redraw
      endIf
      selected = item
      if (item)
        if (item.image.error)
          ImageView.show( null )
          TitleBar.show( item.image )
          StatusBar.text = "[ERROR] $"(item.image.error)
        else
          item.request_redraw
          VimageUI.show( item.image )
          localize scroll_view
          if (scroll_view)
            if (scroll_view.size.y > 0)
              local item_bounds = item.display_bounds
              local view_bounds = scroll_view.display_bounds
              local index = item.index
              local i1 = -scroll_view.content_offset.y
              local i2 = i1 + scroll_view.size.y
              if (index < i1)
                scroll_view.content_offset = XY(0,-index)
                scroll_view.request_redraw
              elseIf (index >= i2)
                scroll_view.content_offset = XY(0,-(index-(scroll_view.size.y-1)))
                scroll_view.request_redraw
              endIf
            else
              # Defer scroll view adjustment until the scroll view has a size
              actions += ActionSelectItem( item )
            endIf
          endIf
        endIf
      else
        VimageUI.show( null )
      endIf

    method to->Variant
      local result = ...
      @{
        selected_index:which{ selected:selected.index || -1 },
        is_dim
      }

      local images = @[]
      forEach (child in children)
        images.add( child->(as ImageListItem).image->Variant )
      endForEach
      result//images = images

      return result

    method unpack( state:Variant )
      clear
      is_dim = state//is_dim
      forEach (image_info in state//images)
        add( ImageListItem(Image(image_info)) )
      endForEach
      if (state//selected_index < count) select( state//selected_index->Int )

endClass  # ImageList

class ActionSelectItem( item:ImageListItem ) : Action
  METHODS
    method on_update( dt:Real ) [override]
      local scroll_view = ImageList.scroll_view
      if (scroll_view.size.y)
        ImageList.select( item )
        finish
      endIf
endClass

class ImageListItem : Component
  PROPERTIES
    image : Image

  METHODS
    method init( image )
      on_resize

    method deselect

    method index->Int
      return which{ ImageList.locate(this) || -1 }

    method is_selected->Logical
      return ImageList.selected is this

    method on( e:PointerEvent )
      if (this.contains(e))
        if (e.is_release)
          ImageList.select( this )
          StatusBar.text = "Select $"(image)
        endIf
      endIf

    method on_draw
      localize display_bounds
      localize is_selected
      temporarily ConsoleUICanvas.clip = display_bounds->Box
        ConsoleUICanvas.cursor = display_bounds.position
        if (is_selected) ConsoleUICanvas.style.inverse
        ConsoleUICanvas.print image.compact_name
        loop (ImageList.fixed_width) ConsoleUICanvas.print ' '
        if (is_selected) ConsoleUICanvas.style.inverse_off
      endTemporarily

    method on_resize
      fixed_size = XY( ImageList.fixed_width, 1 )
endClass

class ImageListScrollView : VScrollView
  METHODS
    method after_draw
      local bounds = display_bounds.with_width(1) + XY(ImageList.fixed_width-1,0)
      ConsoleUICanvas.fill( bounds, '\[2502]' )

    method on_draw
      ConsoleUICanvas.fill( ' ' )
      local bounds = display_bounds.with_width(1)
      ConsoleUICanvas.fill( bounds->Box, StyledCharacter('~',CharacterStyle.DIM) )
endClass
