module Vimage
uses UI

class ImageList : UIList [singleton]
  DEFINITIONS
    FIXED_WIDTH = 21

  PROPERTIES
    selected : ImageListItem
    is_dim   : Logical

  METHODS
    method init
      prior.init
      on_resize

    method add( image:Image )
      add( ImageListItem(image) )
      request_layout

    method after_draw
      if (is_dim) ConsoleUICanvas.style.dim_off

    method dispatch( e:PointerEvent )
      # Send input events to children in reverse order because the top layer comes last
      if (next) next.dispatch( e )
      if (e.is_consumed) return
      handle( e )

    method insert( image:Image, before_index=0:Int32 )
      insert( ImageListItem(image), before_index )
      request_layout

    method on_draw
      if (is_dim) ConsoleUICanvas.style.dim

    method on_resize
      fixed_width = FIXED_WIDTH

    method scroll_view->ImageListScrollView
      local view = parent
      while (view)
        if local result = view->(as ImageListScrollView)
          return result
        endIf
        view .= parent
      endWhile
      return null

    method select( index:Int32 )
      local item = this[index]->(as ImageListItem)
      if (item) select( item )

    method select( image:Image )
      forEach (child in children)
        if local item = child->(as ImageListItem)
          if (item.image is image)
            select( item )
            return
          endIf
        endIf
      endForEach

    method select( item:ImageListItem ) [preferred]
      if (selected)
        selected.deselect
        selected.request_redraw
      endIf
      selected = item
      if (item)
        if (item.image.error)
          ImageView.show( null )
          TitleBar.show( item.image )
          StatusBar.text = "[ERROR] $"(item.image.error)
        else
          item.request_redraw
          VimageUI.show( item.image )
          localize scroll_view
          if (scroll_view)
            local item_bounds = item.display_bounds
            local view_bounds = scroll_view.display_bounds
            local index = item.index
            local i1 = -scroll_view.content_offset.y
            local i2 = i1 + scroll_view.size.y
            if (index < i1)
              scroll_view.content_offset = XY(0,-index)
              scroll_view.request_redraw
            elseIf (index >= i2)
              scroll_view.content_offset = XY(0,-(index-(scroll_view.size.y-1)))
              scroll_view.request_redraw
            endIf
          endIf
        endIf
      else
        VimageUI.show( null )
      endIf

    method to->Value
      local result = ...
      @{
        selected_index:which{ selected:selected.index || -1 },
        :is_dim
      }

      local images = @[]
      forEach (child in children)
        images.add( child->(as ImageListItem).image->Value )
      endForEach
      result//images = images

      return result

    method unpack( state:Value )
      clear
      is_dim = state//is_dim
      forEach (image_info in state//images)
        add( ImageListItem(Image(image_info)) )
      endForEach
      if (state//selected_index < count) select( state//selected_index->Int32 )

endClass  # ImageList

class ImageListItem : UIComponent
  PROPERTIES
    image : Image

  METHODS
    method init( image )
      on_resize

    method deselect

    method index->Int32
      return which{ ImageList.locate(this) || -1 }

    method is_selected->Logical
      return ImageList.selected is this

    method on( e:PointerEvent )
      if (this.contains(e))
        if (e.is_release)
          ImageList.select( this )
          StatusBar.text = "Select $"(image)
        endIf
      endIf

    method on_draw
      localize display_bounds
      localize is_selected
      temporarily ConsoleUICanvas.clip = display_bounds
        ConsoleUICanvas.cursor = display_bounds.position
        if (is_selected) ConsoleUICanvas.style.inverse
        ConsoleUICanvas.print image.compact_name
        loop (ImageList.FIXED_WIDTH) ConsoleUICanvas.print ' '
        if (is_selected) ConsoleUICanvas.style.inverse_off
      endTemporarily

    method on_resize
      fixed_size = XY( ImageList.FIXED_WIDTH, 1 )
endClass

class ImageListScrollView : UIScrollView
  METHODS
    method after_draw
      local bounds = display_bounds.with_width(1) + XY(ImageList.FIXED_WIDTH-1,0)
      ConsoleUICanvas.fill( bounds, '\[2502]' )

    method on_draw
      ConsoleUICanvas.fill( ' ' )
      local bounds = display_bounds.with_width(1)
      ConsoleUICanvas.fill( bounds, StyledCharacter('~',CharacterStyle.DIM) )
endClass
