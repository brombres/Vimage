module Vimage
uses Math/Best

class Cmd
  GLOBAL METHODS
    method create( new_state:State )->Cmd
      return CmdChangeState( new_state )

    method create( callback:Function(e:KeyEvent) )->Cmd
      return CmdCallback( callback )

  METHODS
    method init

    method allowed_in_macro->Logical
      return true

    method call
      update_status
      if (Vimage.repeat_count)
        local repeat_count = Vimage.read_and_reset_repeat_count
        execute( repeat_count )
      else
        execute( 1 )
      endIf

    method execute
      noAction

    method execute( repeat_count:Int32 )
      loop (repeat_count)
        execute
      endLoop

    method is_edit->Logical
      return false

    method is_interactive->Logical
      return false

    method on( e:KeyEvent )
      Vimage.execute( this )

    method set_state( new_state:State )
      State.current.change_state( new_state )

    method set_status( text:String, &dim )
      use status = StatusBar
        if (dim) status.style.dim
        status.print text
        if (dim) status.style.dim_off
      endUse

    method update_status
      noAction
endClass

class EditCmd : Cmd
  METHODS
    method is_edit->Logical
      return true

    method call
      update_status
      if (Vimage.repeat_count)
        local repeat_count = Vimage.read_and_reset_repeat_count
        execute( repeat_count )
        Vimage.last_repeat_count = repeat_count
      else
        execute( 1 )
        Vimage.last_repeat_count = 1
      endIf

endClass

class InteractiveCmd : Cmd
  METHODS
    method is_interactive->Logical
      return true
endClass

class CmdCallback( callback:Function(e:KeyEvent) ) : Cmd
  METHODS
    method on( e:KeyEvent )
      callback( e )
endClass

class CmdChangeState( new_state:State ) : InteractiveCmd
  METHODS
    method on( e:KeyEvent )
      state = new_state
endClass

class CmdApply : EditCmd [singleton]
  METHODS
    method allowed_in_macro->Logical
      return false

    method update_status
      if (Vimage.recording_macro)
        Vimage.recording_macro = false
        if (Vimage.macro.count) status = "a (apply macro) [recording stopped]"
        else                    status = "a (apply macro) [recording stopped] [no macro recorded]"
      elseIf (Vimage.macro.is_empty)
        status = "a (apply macro) [no macro recorded]"
      else
        status = "a (apply macro)"
      endIf

    method execute
      forEach (cmd in Vimage.macro) Vimage.execute( cmd, &skip_undo_save_state )
      Vimage.last_cmd = this
endClass

class CmdApplyAll : EditCmd [singleton]
  METHODS
    method allowed_in_macro->Logical
      return false

    method update_status
      if (Vimage.recording_macro)
        Vimage.recording_macro = false
        if (Vimage.macro.count) status = "A (apply macro to all) [recording stopped]"
        else                    status = "A (apply macro to all) [recording stopped] [no macro recorded]"
      elseIf (Vimage.macro.is_empty)
        status = "a (apply macro to all) [no macro recorded]"
      else
        status = "a (apply macro to all)"
      endIf

    method execute
      VimageUI.actions += ActionApplyAll( this )
endClass

class CmdAspect( size:XY ) : EditCmd
  METHODS
    method update_status
      use status = StatusBar
        status.print "crop to have aspect ratio "
        status.print size.x
        status.print ':'
        status.print size.y
        if (not ImageList.selected) status.print " [no image selected]"
      endUse

    method execute
      if (not ImageList.selected) return
      execute( ImageList.selected.image )

    method execute( image:Image )
      local w = image.bitmap.width
      local h = image.bitmap.height
      local adjusted_height = (w->Real64 / size.x) * size.y : Int32
      local adjusted_width  = (h->Real64 / size.y) * size.x : Int32
      if (adjusted_width == w and adjusted_height == h) return

      local bitmap = image.cloned_bitmap
      if (adjusted_width < w) bitmap.crop( adjusted_width, h,  Vimage.anchor, Vimage.bg_color )
      else                    bitmap.crop( w, adjusted_height, Vimage.anchor, Vimage.bg_color )

      ImageView.show( image )
endClass

class CmdBeginCommandLine : InteractiveCmd [singleton]
  METHODS
    method update_status
      use builder = StatusBar
        builder.print ':'
        builder.style.inverse; builder.print ' '; builder.style.inverse_off
      endUse

    method on( e:KeyEvent )
      Vimage.repeat_count = null
      VimageUI.command.clear
      update_status
      state = EnterCmdLineState()
endClass

class CmdBitwiseAND : EditCmd [singleton]
  METHODS
    method update_status
      status = "& (bitwise-AND with underlying image)"

    method execute
      if local selected = ImageList.selected
        if (selected is ImageList.last_child)
          status = "& (bitwise-AND) [no underlying image]"
          return
        else
          local top    = selected.image.bitmap
          local bottom_image  = selected.next->(as ImageListItem).image
          local bottom_bitmap = bottom_image.cloned_bitmap
          top.blit( bottom_bitmap, XY(0,0), BlitModeAND )
          ImageList.remove( selected )
          ImageList.select( bottom_image )
        endIf
      endIf
endClass

class CmdBitwiseOR : EditCmd [singleton]
  METHODS
    method update_status
      status = "| (bitwise-OR with underlying image)"

    method execute
      if local selected = ImageList.selected
        if (selected is ImageList.last_child)
          status = "| (bitwise-OR) [no underlying image]"
          return
        else
          local top    = selected.image.bitmap
          local bottom_image  = selected.next->(as ImageListItem).image
          local bottom_bitmap = bottom_image.cloned_bitmap
          top.blit( bottom_bitmap, XY(0,0), BlitModeOR )
          ImageList.remove( selected )
          ImageList.select( bottom_image )
        endIf
      endIf
endClass

class CmdBitwiseXOR : EditCmd [singleton]
  METHODS
    method update_status
      status = "~ (bitwise-XOR with underlying image)"

    method execute
      if local selected = ImageList.selected
        if (selected is ImageList.last_child)
          status = "~ (bitwise-XOR) [no underlying image]"
          return
        else
          local top    = selected.image.bitmap
          local bottom_image  = selected.next->(as ImageListItem).image
          local bottom_bitmap = bottom_image.cloned_bitmap
          top.blit( bottom_bitmap, XY(0,0), BlitModeXOR )
          ImageList.remove( selected )
          ImageList.select( bottom_image )
        endIf
      endIf
endClass

class CmdBitwiseNOT : EditCmd [singleton]
  METHODS
    method update_status
      status = "! (bitwise-NOT; invert)"

    method execute
      if local selected = ImageList.selected
        local bitmap = selected.image.cloned_bitmap
        local n = bitmap.pixels.count
        native @|RogueInt32* data  = $bitmap->pixels->as_int32s - 1;
                |
                |while (--$n >= 0)
                |{
                |  RogueInt32 argb = *(++data);
                |  *data = (argb & 0xFF000000) | (~argb & 0xFFffFF);
                |}
      endIf
endClass

class CmdBitwiseRotateLeft : EditCmd [singleton]
  METHODS
    method update_status
      status = "< (bitwise rotate left)"

    method execute
      if local selected = ImageList.selected
        local bitmap = selected.image.cloned_bitmap
        local n = bitmap.size.product
        native @|RogueInt32* data  = $bitmap->pixels->as_int32s - 1;
                |
                |while (--$n >= 0)
                |{
                |  RogueInt32 argb = *(++data);
                |  *data = (argb & 0xFF000000) | ((argb<<1) & 0xFFffFE) | ((argb>>23) & 1);
                |}
      endIf
endClass

class CmdBitwiseRotateRight : EditCmd [singleton]
  METHODS
    method update_status
      status = "> (bitwise rotate right)"

    method execute
      if local selected = ImageList.selected
        local bitmap = selected.image.cloned_bitmap
        local n = bitmap.size.product
        native @|RogueInt32* data  = $bitmap->pixels->as_int32s - 1;
                |
                |while (--$n >= 0)
                |{
                |  RogueInt32 argb = *(++data);
                |  *data = (argb & 0xFF000000) | ((argb>>1) & 0x7FffFF) | ((argb<<23) & 0x800000);
                |}
      endIf
endClass

class CmdClamp( lo:ColorValue, hi:ColorValue ) : EditCmd
  METHODS
    method update_status
      use status = StatusBar
        status.print "clamp $ $"(lo,hi)
        if (not ImageList.selected)
          status.print " [no image selected]"
        endIf
      endUse

    method execute
      if local selected = ImageList.selected
        local bitmap = selected.image.cloned_bitmap
        local n = bitmap.size.product
        local lo = lo->Color
        local hi = hi->Color
        local min_a = lo.alpha_byte
        local min_r = lo.red_byte
        local min_g = lo.green_byte
        local min_b = lo.blue_byte
        local max_a = hi.alpha_byte
        local max_r = hi.red_byte
        local max_g = hi.green_byte
        local max_b = hi.blue_byte
        native @|RogueInt32* data  = $bitmap->pixels->as_int32s - 1;
                |
                |while (--$n >= 0)
                |{
                |  RogueInt32 argb = *(++data);
                |  int a = (argb >> 24) & 255;
                |  int r = (argb >> 16) & 255;
                |  int g = (argb >> 8) & 255;
                |  int b = argb & 255;
                |  a = (a < $min_a) ? $min_a : (a > $max_a ? $max_a : a);
                |  r = (r < $min_r) ? $min_r : (r > $max_r ? $max_r : r);
                |  g = (g < $min_g) ? $min_g : (g > $max_g ? $max_g : g);
                |  b = (b < $min_b) ? $min_b : (b > $max_b ? $max_b : b);
                |  *data = (a<<24) | (r<<16) | (g<<8) | b;
                |}
      endIf
endClass

class CmdCopy( a:String, b:String ) : EditCmd
  METHODS
    method update_status
      if (not ImageList.selected)
        status = "copy channels $ -> $ [no image selected]"(a,b)
        return
      endIf

      status = "copy channels $ -> $"(a,b)

    method execute
      if (not ImageList.selected)
        return
      endIf

      local bitmap = ImageList.selected.image.cloned_bitmap

      if (a.count == 1 and "bgra".contains(a))
        local a_shift = ("bgra".locate(a).value :<<: 3)
        forEach (dest_channel in b)
          local b_shift = ("bgra".locate(dest_channel).value :<<: 3)
          forEach (color in rewriter=bitmap.pixels.rewriter)
            local a = (color.argb :>>>: a_shift) & 0xFF
            local b = (color.argb :>>>: b_shift) & 0xFF
            local argb = color.argb & !(0xFF:<<:b_shift)
            argb |= (a :<<: b_shift)
            rewriter.write( Color(argb) )
          endForEach
        endForEach
      else
        # Replace color channel with constant value 00-ff
        local a = a->Int32(&base=16)
        forEach (dest_channel in b)
          local b_shift = ("bgra".locate(dest_channel).value :<<: 3)
          local write_a = a :<<: b_shift
          forEach (color in rewriter=bitmap.pixels.rewriter)
            local argb = color.argb & !(0xFF:<<:b_shift)
            argb |= write_a
            rewriter.write( Color(argb) )
          endForEach
        endForEach
      endIf

      ImageView.mark_modified
endClass

class CmdCrop( left:Int32, top:Int32, right:Int32, bottom:Int32 ) : EditCmd
  METHODS
    method update_status
      local status = String()
      local n = which{ Vimage.repeat_count || 1 }

      localize left, top, right, bottom
      left *= n
      top *= n
      right *= n
      bottom *= n

      status.print( "crop" )
      if (left)   status.print " left $"(left)
      if (top)    status.print " top $"(top)
      if (right)  status.print " right $"(right)
      if (bottom) status.print " bottom $"(bottom)

      if local selected = ImageList.selected
        local size = selected.image.bitmap.size
        if (size.x - (left+right) < 1 or size.y - (top+bottom) < 1)
          status.print " [exceeds image dimensions]"
        endIf
      else
        status.print " [no image selected]"
      endIf

      StatusBar.text = status

    method execute( repeat_count:Int32 )
      if (not ImageList.selected) return
      execute( ImageList.selected.image, repeat_count )

    method execute( image:Image, n:Int32 )
      localize left, top, right, bottom
      left *= n
      top *= n
      right *= n
      bottom *= n

      if (image.size.x - (left+right) < 1 or image.size.y - (top+bottom) < 1)
        return
      endIf

      image.cloned_bitmap.crop( left, top, right, bottom, Vimage.bg_color )
      ImageView.show( image )
endClass

class CmdCropToSize( width:Int32?, height:Int32? ) : EditCmd
  METHODS
    method update_status
      use status = StatusBar
        status.print "crop "
        if (width and height)
          status.print "$x$"(width,height)
        elseIf (width)
          status.print "width $"(width)
        elseIf (height)
          status.print "height $"(height)
        endIf
        if (not ImageList.selected) status.print " [no image selected]"
      endUse

    method execute
      if (not ImageList.selected) return
      execute( ImageList.selected.image )

    method execute( image:Image )
      if (width)
        local width = this.width.value
        if (width < 0) width = image.bitmap.width + width
        if (height)
          local height = this.height.value
          if (height < 0) height = image.bitmap.height + height
          if (image.bitmap.size == XY(width,height)) return

          local bitmap = image.cloned_bitmap
          bitmap.crop( width, height, Vimage.anchor, Vimage.bg_color )
        else
          local new_size = XY( width, image.bitmap.height )
          if (image.bitmap.size == new_size) return

          local bitmap = image.cloned_bitmap
          bitmap.crop( new_size.x, new_size.y, Vimage.anchor, Vimage.bg_color )
        endIf
      elseIf (height)
        local height = this.height.value
        if (height < 0) height = image.bitmap.height + height
        local new_size = XY( image.bitmap.width, height )
        if (image.bitmap.size == new_size) return

        local bitmap = image.cloned_bitmap
        bitmap.crop( new_size.x, new_size.y, Vimage.anchor, Vimage.bg_color )
      endIf

      ImageView.show( image )
endClass

class CmdCropToScale( sx:Real?, sy:Real? ) : EditCmd
  METHODS
    method update_status
      use status = StatusBar
        status.print "crop to scale "
        if (sx and sy)
          status.print "$x$"(sx,sy)
        elseIf (sx)
          status.print "sx $"(sx)
        elseIf (sy)
          status.print "sy $"(sy)
        endIf
        if (not ImageList.selected) status.print " [no image selected]"
      endUse

    method execute
      if (not ImageList.selected) return
      execute( ImageList.selected.image )

    method execute( image:Image )
      local w, h : Int32?
      if (sx) w = (image.bitmap.width  * sx.value)->Int32
      if (sy) h = (image.bitmap.height * sy.value)->Int32
      CmdCropToSize( w, h ).execute
endClass

class CmdDX : EditCmd [singleton]
  METHODS
    method on( e:KeyEvent )
endClass

class CmdDelete : EditCmd [singleton]
  METHODS
    method update_status
      if (ImageList.selected)
        set_status( "d (delete image and copy to clipboard)" )
      else
        set_status( "d [no image to delete]" )
      endIf

    method execute( repeat_count:Int32 )
      loop (repeat_count-1)
        if (ImageList.selected)
          ImageList.remove_selected
        endIf
      endLoop

      if (ImageList.selected)
        if (Vimage.using_os_clipboard)
          Clipboard.bitmap = ImageList.selected->(as ImageListItem).image.bitmap
        else
          Vimage.clipboard = ImageList.selected->(as ImageListItem).image.bitmap
        endIf
        ImageList.remove_selected
      endIf
endClass

class CmdEscapeToImageListState : Cmd [singleton]
  METHODS
    method execute
      state = ImageListState
endClass

class CmdGoToFirstImage : Cmd [singleton]
  METHODS
    method update_status
      status = "g (go to first image)"

    method execute
      if (ImageList.count)
        ImageList.select( 0 )
      endIf
endClass

class CmdGoToLastImage : Cmd [singleton]
  METHODS
    method update_status
      status = "G (go to last image)"

    method execute
      if (ImageList.count)
        ImageList.select( ImageList.count-1 )
      endIf
endClass

class CmdHSB2RGB : EditCmd [singleton]
  METHODS
    method update_status
      if (ImageList.selected)
        status = "hsb2rgb"
      else
        status = "hsb2rgb [no image selected]"
      endIf

    method execute
      if (not ImageList.selected) return

      local bitmap = ImageList.selected.image.cloned_bitmap
      local n = bitmap.pixels.count
      native...
        @|RogueInt32* data  = $bitmap->pixels->as_int32s - 1;
         |
         |while (--$n >= 0)
         |{
         |  RogueInt32 argb = *(++data);
         |  int   a = argb & 0xFF000000;
         |  float hue = ((argb >> 16) & 255) / 255.0f;
         |  float saturation = ((argb >> 8) & 255) / 255.0f;
         |  float brightness = (argb & 255) / 255.0f;
         |
         |  if (saturation)
         |  {
         |    float r, g, b;
         |    hue *= 6;
         |    int i = (int)hue;
         |    float f = hue - i;
         |    float p = brightness * (1 - saturation);
         |    float q = brightness * (1 - saturation * f);
         |    float t = brightness * (1 - saturation * (1 - f));
         |    switch (i)
         |    {
         |      case 0:
         |          r = brightness;
         |          g = t;
         |          b = p;
         |          break;
         |      case 1:
         |          r = q;
         |          g = brightness;
         |          b = p;
         |          break;
         |      case 2:
         |          r = p;
         |          g = brightness;
         |          b = t;
         |          break;
         |      case 3:
         |          r = p;
         |          g = q;
         |          b = brightness;
         |          break;
         |      case 4:
         |          r = t;
         |          g = p;
         |          b = brightness;
         |          break;
         |      default:
         |          r = brightness;
         |          g = p;
         |          b = q;
         |          break;
         |    }
         |
         |    *data = a | ((int)(r*255+0.5))<<16 | ((int)(g*255+0.5))<<8 | ((int)(b*255+0.5));
         |  }
         |  else
         |  {
         |    int v = (int)(brightness * 255 + 0.5);
         |    *data = a | (v<<16) | (v<<8) | v;
         |  }
         |}
endClass

class CmdImageListNext : Cmd [singleton]
  METHODS
    method update_status
      status = "j (down to next image)"

    method execute
      if local current = ImageList.selected
        if (current.next)
          ImageList.select( current.next->(as ImageListItem) )
        endIf
      endIf
endClass

class CmdImageListPrevious : Cmd [singleton]
  METHODS
    method update_status
      status = "k (up to previous image)"

    method execute
      if local current = ImageList.selected
        forEach (child in ImageList.children)
          if (child.next is current)
            ImageList.select( child->(as ImageListItem) )
            escapeForEach
          endIf
        endForEach
      endIf
endClass

class CmdImageListShiftDown : Cmd [singleton]
  METHODS
    method update_status
      status = "J (shift image down in list)"

    method execute
      if local current = ImageList.selected
        if local index = ImageList.locate( current )
          Vimage.save_undo
          ImageList.remove( current )
          ImageList.insert( current, index+1 )
          ImageList.request_layout
        endIf
      endIf
endClass

class CmdImageListShiftUp : Cmd [singleton]
  METHODS
    method update_status
      status = "K (shift image up in list)"

    method execute
      if local current = ImageList.selected
        if local index = ImageList.locate( current )
          if (index > 0)
            Vimage.save_undo
            ImageList.remove( current )
            ImageList.insert( current, index-1 )
            ImageList.request_layout
          endIf
        endIf
      endIf
endClass

class CmdParseJoinH : Cmd [singleton]
  METHODS
    method on( e:KeyEvent )
      local cmd = CmdJoin( XY( which{Vimage.repeat_count||2}, 1 ) )
      Vimage.repeat_count = null
      Vimage.execute( cmd )
endClass

class CmdParseJoinV : Cmd [singleton]
  METHODS
    method on( e:KeyEvent )
      local cmd = CmdJoin( XY( 1, which{Vimage.repeat_count||2} ) )
      Vimage.repeat_count = null
      Vimage.execute( cmd )
endClass

class CmdJoin( dims:XY ) : EditCmd
  METHODS
    method update_status
      local w = dims.x
      local h = dims.y
      local total = w * h
      local has_images = which{ ImageList.count:"" || " [no image selected]" }
      if (total <= 1)
        status = "join $x$ [no effect]"(w,h)
        return
      elseIf (h == 1)
        if (w == 2) status = "n (join horizontal)$"(has_images)
        else        status = "$n (join horizontal)$"(w,has_images)
      elseIf (w == 1)
        if (h == 2) status = "N (join vertical)$"(has_images)
        else        status = "$N (join vertical)$"(h,has_images)
      elseIf (ImageList.count == 0)
        status = "join $x$ [no image selected]"(w,h)
        return
      else
        status = "join $x$"(w,h)
      endIf

    method execute
      local w = dims.x
      local h = dims.y
      local total = w * h

      if (ImageList.count == 0 or total <= 1) return

      local original_index = ImageList.selected.index

      use list = WorkList<<Image>>
        loop (total)
          local index = ImageList.selected.index
          list.add( ImageList.selected.image )
          ImageList.remove( ImageList.selected )
          if (index < ImageList.count)
            ImageList.select( index )
          elseIf (ImageList.count > 0)
            ImageList.select( ImageList.last_child->(as ImageListItem) )
            escapeLoop
          else
            ImageList.select( null )
            escapeLoop
          endIf
        endLoop

        while (list.count < total)
          list.add( Image(Bitmap(1,1).[clear(Vimage.bg_color)]) )
        endWhile

        # Find largest width and largest height
        local max_width = Best<<Int32>>( (a,b) => a > b )
        local max_height = Best<<Int32>>( (a,b) => a > b )
        forEach (item in list)
          max_width.consider( item.bitmap.width )
          max_height.consider( item.bitmap.height )
        endForEach

        local tile_w = max_width.value
        local tile_h = max_height.value

        local total_w, total_h : Int32
        if (w == 1)
          # Resize all images to be max width
          local cmd = CmdResizeToSize( tile_w, null )
          cmd.execute( (forEach in list) )
          total_w = tile_w
          total_h += (forEach in list).bitmap.height
        elseIf (h == 1)
          # Resize all images to be max height
          local cmd = CmdResizeToSize( null, tile_h )
          cmd.execute( (forEach in list) )
          total_w += (forEach in list).bitmap.width
          total_h = tile_h
        else
          # Reshape all images to be max width and/or height
          local cmd = CmdAspectFitToSize( tile_w, tile_h )
          cmd.execute( (forEach in list) )
          total_w = tile_w * w
          total_h = tile_h * h
        endIf

        local result = Bitmap( total_w, total_h )
        local cursor_y = 0
        forEach (j in 0..<h)
          local cursor_x = 0
          local dy = tile_h
          forEach (i in 0..<w)
            local bitmap = list[ j*w+i ].bitmap
            bitmap.blit( result, cursor_x, cursor_y )
            dy = bitmap.height
            cursor_x += bitmap.width
          endForEach
          cursor_y += dy
        endForEach

        local result_image = Image( result )
        ImageList.insert( result_image, original_index )
        ImageList.select( result_image )

      endUse
endClass

class CmdAspectFillToSize( width:Int32?, height:Int32? ) : EditCmd
  METHODS
    method update_status
      use status = StatusBar
        status.print "aspect-fill (resize to fill) "
        if (width and height)
          status.print "$x$"(width,height)
        elseIf (width)
          status.print "width $"(width)
        elseIf (height)
          status.print "height $"(height)
        endIf
        if (not ImageList.selected) status.print " [no image selected]"
      endUse

    method execute
      if (not ImageList.selected) return
      execute( ImageList.selected.image )

    method execute( image:Image )
      if (width)
        local width = this.width.value
        if (height)
          local height = this.height.value
          if (image.bitmap.size == XY(width,height)) return

          local bitmap = image.cloned_bitmap
          local x_scale = width->Real64 / image.bitmap.size.x
          local y_scale = height->Real64 / image.bitmap.size.y
          local scale = x_scale.or_larger( y_scale )
          bitmap.resize( bitmap.size * scale )
          bitmap.crop( width, height, Vimage.anchor, Vimage.bg_color )
        else
          local new_size = XY( width, image.bitmap.size.y*(width->Real64/image.bitmap.size.x) )
          if (image.bitmap.size == new_size) return

          local bitmap = image.cloned_bitmap
          bitmap.resize( new_size.x, new_size.y )
        endIf
      elseIf (height)
        local height = this.height.value
        local new_size = XY( image.bitmap.size.x*(height->Real64/image.bitmap.size.y), height )
        if (image.bitmap.size == new_size) return

        local bitmap = image.cloned_bitmap
        bitmap.resize( new_size.x, new_size.y )
      endIf

      ImageView.show( image )
endClass

class CmdAspectFillToScale( sx:Real?, sy:Real? ) : EditCmd
  METHODS
    method update_status
      use status = StatusBar
        status.print "aspect-fill to scale "
        if (sx and sy)
          status.print "$x$"(sx,sy)
        elseIf (sx)
          status.print "sx $"(sx)
        elseIf (sy)
          status.print "sy $"(sy)
        endIf
        if (not ImageList.selected) status.print " [no image selected]"
      endUse

    method execute
      if (not ImageList.selected) return
      execute( ImageList.selected.image )

    method execute( image:Image )
      local w, h : Int32?
      if (sx) w = (image.bitmap.width  * sx.value)->Int32
      if (sy) h = (image.bitmap.height * sy.value)->Int32
      CmdAspectFillToSize( w, h ).execute
endClass

class CmdAspectFitToSize( width:Int32?, height:Int32? ) : EditCmd
  METHODS
    method update_status
      use status = StatusBar
        status.print "aspect-fit (resize to fit) "
        if (width and height)
          status.print "$x$"(width,height)
        elseIf (width)
          status.print "width $"(width)
        elseIf (height)
          status.print "height $"(height)
        endIf
        if (not ImageList.selected) status.print " [no image selected]"
      endUse

    method execute
      if (not ImageList.selected) return
      execute( ImageList.selected.image )

    method execute( image:Image )
      if (width)
        local width = this.width.value
        if (height)
          local height = this.height.value
          if (image.bitmap.size == XY(width,height)) return

          local bitmap = image.cloned_bitmap
          local x_scale = width->Real64 / image.bitmap.size.x
          local y_scale = height->Real64 / image.bitmap.size.y
          local scale = x_scale.or_smaller( y_scale )
          bitmap.resize( bitmap.size * scale )
          bitmap.crop( width, height, Vimage.anchor, Vimage.bg_color )
        else
          local new_size = XY( width, image.bitmap.size.y*(width->Real64/image.bitmap.size.x) )
          if (image.bitmap.size == new_size) return

          local bitmap = image.cloned_bitmap
          bitmap.resize( new_size.x, new_size.y )
        endIf
      elseIf (height)
        local height = this.height.value
        local new_size = XY( image.bitmap.size.x*(height->Real64/image.bitmap.size.y), height )
        if (image.bitmap.size == new_size) return

        local bitmap = image.cloned_bitmap
        bitmap.resize( new_size.x, new_size.y )
      endIf

      ImageView.show( image )
endClass

class CmdAspectFitToScale( sx:Real?, sy:Real? ) : EditCmd
  METHODS
    method update_status
      use status = StatusBar
        status.print "aspect-fit to scale "
        if (sx and sy)
          status.print "$x$"(sx,sy)
        elseIf (sx)
          status.print "sx $"(sx)
        elseIf (sy)
          status.print "sy $"(sy)
        endIf
        if (not ImageList.selected) status.print " [no image selected]"
      endUse

    method execute
      if (not ImageList.selected) return
      execute( ImageList.selected.image )

    method execute( image:Image )
      local w, h : Int32?
      if (sx) w = (image.bitmap.width  * sx.value)->Int32
      if (sy) h = (image.bitmap.height * sy.value)->Int32
      CmdAspectFitToSize( w, h ).execute
endClass

class CmdFlipH : EditCmd [singleton]
  METHODS
    method update_status
      if (ImageList.selected)
        status = "f (flip horizontal)"
      else
        status = "f (flip horizontal) [no image selected]"
      endIf

    method execute
      if (ImageList.selected)
        local img = ImageList.selected.image
        img.cloned_bitmap.flip( &h )
        ImageView.mark_modified
      endIf
endClass

class CmdFlipV : EditCmd [singleton]
  METHODS
    method update_status
      if (ImageList.selected)
        status = "F (flip vertical)"
      else
        status = "F (flip vertical) [no image selected]"
      endIf

    method execute
      if (ImageList.selected)
        local img = ImageList.selected.image
        img.cloned_bitmap.flip( &v )
        ImageView.mark_modified
      endIf
endClass

class CmdFill( c:ColorValue ) : EditCmd
  METHODS
    method update_status
      status = "fill $"(c)

    method execute( ignore_repeat_count:Int32 )
      if (not ImageList.selected) return

      local bitmap = ImageList.selected.image.cloned_bitmap
      local w = bitmap.width
      local h = bitmap.height
      local color = c->Color.argb

      native @|RogueInt32* data  = $bitmap->pixels->as_int32s - 1;

      loop (h)
        local n = w
        native
          @|while (--$n >= 0)
           |{
           |  *(++data) = $color;
           |}
      endLoop

endClass

class CmdFill2( a:ColorValue, b:ColorValue ) : EditCmd METHODS
    method update_status
      status = "fill $ $"(a,b)

    method execute( ignore_repeat_count:Int32 )
      if (not ImageList.selected) return

      local bitmap = ImageList.selected.image.cloned_bitmap
      local w = bitmap.width
      local h = bitmap.height
      local left = a->Color
      local right = b->Color

      native @|RogueInt32* data  = $bitmap->pixels->as_int32s - 1;

      loop (h)
        local mid = ColorLerp( left, right, w-1 )
        local n = w
        native
          @|while (--$n >= 0)
           |{
              local argb = mid.read_another.value
        native
          @|  *(++data) = $argb;
           |}
      endLoop

endClass

class CmdFill4( a:ColorValue, b:ColorValue, c:ColorValue, d:ColorValue ) : EditCmd
  METHODS
    method update_status
      status = "fill $ $ $ $"(a,b,c,d)

    method execute( ignore_repeat_count:Int32 )
      if (not ImageList.selected) return

      local bitmap = ImageList.selected.image.cloned_bitmap
      local w = bitmap.width
      local h = bitmap.height
      local left = ColorLerp( a, c, h-1 )
      local right = ColorLerp( b, d, h-1 )

      native @|RogueInt32* data  = $bitmap->pixels->as_int32s - 1;

      loop (h)
        local mid = ColorLerp( Color(left.read_another.value), Color(right.read_another.value), w-1 )
        local n = w
        native
          @|while (--$n >= 0)
           |{
              local argb = mid.read_another.value
        native
          @|  *(++data) = $argb;
           |}
      endLoop

endClass

class CmdFillGradient( colors:ColorValue[] ) : EditCmd
  METHODS
    method update_status
      status = "fill $"(colors)

    method execute( ignore_repeat_count:Int32 )
      if (not ImageList.selected) return

      local bitmap = ImageList.selected.image.cloned_bitmap
      local w = bitmap.width
      local h = bitmap.height
      local gradient = ColorGradient( colors, w )

      native @|RogueInt32* data  = $bitmap->pixels->as_int32s - 1;

      loop (h)
        gradient.reset
        local n = w
        native
          @|while (--$n >= 0)
           |{
              local argb = gradient.read_another.value
        native
          @|  *(++data) = $argb;
           |}
      endLoop

endClass

class CmdLiteralBitwiseAND( argb:Int32 )  : EditCmd
  METHODS
    method update_status
      status = "& $ (bitwise AND)"(argb->String(&hex))

    method execute
      if local selected = ImageList.selected
        local bitmap = selected.image.cloned_bitmap
        local n = bitmap.pixels.count
        localize argb
        native @|RogueInt32* data  = $bitmap->pixels->as_int32s - 1;
                |
                |while (--$n >= 0)
                |{
                |  RogueInt32 argb = *(++data);
                |  *data = (argb & $argb);
                |}
      endIf
endClass

class CmdLiteralBitwiseOR( argb:Int32 )  : EditCmd
  METHODS
    method update_status
      status = "| $ (bitwise OR)"(argb->String(&hex))

    method execute
      if local selected = ImageList.selected
        local bitmap = selected.image.cloned_bitmap
        local n = bitmap.pixels.count
        localize argb
        native @|RogueInt32* data  = $bitmap->pixels->as_int32s - 1;
                |
                |while (--$n >= 0)
                |{
                |  RogueInt32 argb = *(++data);
                |  *data = (argb | $argb);
                |}
      endIf
endClass

class CmdLiteralBitwiseROL( bit_count:Int32, include_alpha:Logical )  : EditCmd
  METHODS
    method update_status
      status = "< $ (bitwise ROL)"(bit_count)

    method execute
      if local selected = ImageList.selected
        local bitmap = selected.image.cloned_bitmap
        local n = bitmap.pixels.count
        localize bit_count
        if (include_alpha)
          bit_count &= 31
          local shr = 32 - bit_count
          local lsb_mask = which{ bit_count:(-1:>>:shr) || 0 }
          native @|RogueInt32* data  = $bitmap->pixels->as_int32s - 1;
                  |
                  |while (--$n >= 0)
                  |{
                  |  RogueInt32 argb = *(++data);
                  |  *data = (argb << $bit_count) | ((argb >> $shr) & $lsb_mask);
                  |}
        else
          bit_count %= 24
          local shr = 24 - bit_count
          local lsb_mask = which{ bit_count:(0xFFFFFF:>>:shr) || 0 }
          native @|RogueInt32* data  = $bitmap->pixels->as_int32s - 1;
                  |
                  |while (--$n >= 0)
                  |{
                  |  RogueInt32 argb = *(++data);
                  |  *data = (argb & 0xFF000000) | ((argb << $bit_count) & 0xFFFFFF) | ((argb >> $shr) & $lsb_mask);
                  |}
        endIf
      endIf
endClass

class CmdLiteralBitwiseROR( bit_count:Int32, include_alpha:Logical )  : EditCmd
  METHODS
    method update_status
      status = "> $ (bitwise ROR)"(bit_count)

    method execute
      if local selected = ImageList.selected
        local bitmap = selected.image.cloned_bitmap
        local n = bitmap.pixels.count
        localize bit_count
        if (include_alpha)
          bit_count &= 31
          local shl = 32 - bit_count
          local lsb_mask = 0xFFFFFFFF:>>:bit_count
          native @|RogueInt32* data  = $bitmap->pixels->as_int32s - 1;
                  |
                  |while (--$n >= 0)
                  |{
                  |  RogueInt32 argb = *(++data);
                  |  *data = ((argb >> $bit_count) & $lsb_mask) | (argb << $shl);
                  |}
        else
          bit_count %= 24
          local shl = 24 - bit_count
          local lsb_mask = 0xffffff:>>>:bit_count
          native @|RogueInt32* data  = $bitmap->pixels->as_int32s - 1;
                  |
                  |while (--$n >= 0)
                  |{
                  |  RogueInt32 argb = *(++data);
                  |  *data = (argb & 0xFF000000) | ((argb >> $bit_count) & $lsb_mask) | ((argb << $shl) & 0xFFFFFF);
                  |}
        endIf
      endIf
endClass

class CmdLiteralBitwiseXOR( argb:Int32 )  : EditCmd
  METHODS
    method update_status
      status = "~ $ (bitwise XOR)"(argb->String(&hex))

    method execute
      if local selected = ImageList.selected
        local bitmap = selected.image.cloned_bitmap
        local n = bitmap.pixels.count
        localize argb
        native @|RogueInt32* data  = $bitmap->pixels->as_int32s - 1;
                |
                |while (--$n >= 0)
                |{
                |  RogueInt32 argb = *(++data);
                |  *data = (argb ^ $argb);
                |}
      endIf
endClass

class CmdMacro : Cmd [singleton]
  METHODS
    method allowed_in_macro->Logical
      return false

    method update_status

    method execute( ignore_repeat_count:Int32 )
      if (Vimage.recording_macro)
        Vimage.recording_macro = false
        status = "q (end macro) [can now (a)pply or apply to (A)ll]"
      else
        status = "q (begin recording macro) ['q' again to end]"
        Vimage.recording_macro = true
        Vimage.macro.clear
      endIf
endClass

class CmdNew( size:XY ) : EditCmd
  METHODS
    method update_status
      status = "new image [$x$] ($)"(size.x,size.y,Vimage.bg_color)

    method execute
      local before_index = 0
      if (ImageList.selected)
        before_index = ImageList.selected.index + 1
      endIf

      local bitmap = Bitmap( size ).[ clear(Vimage.bg_color) ]
      local image  = Image( bitmap )
      local item   = ImageListItem( image )
      ImageList.insert( item, before_index )
      ImageList.select( item )
      ImageList.request_layout
endClass

class CmdOpen( args:String[] ) : EditCmd
  METHODS
    method update_status
      status = "open images for editing"

    method execute
      local first_index = which{ ImageList.selected:ImageList.selected.index+1 || 0 }
      local index = first_index


      forEach (arg in args)
        forEach (filepath in File(arg).listing)
          local file = File( filepath )
          contingent
            necessary (not file.is_folder)
            local ext = file.extension
            which (ext)
              case "bmp", "jpg", "jpeg", "png", "tif", "tiff"
                noAction
              others
                escapeContingent
            endWhich
            necessary (not ImageList.contains(file))

            ImageList.insert( Image(file), index )
            if (not ImageList.selected) ImageList.select( index )
            ++index
          endContingent
        endForEach
      endForEach

      if (index != first_index) ImageList.select( first_index )

endClass

class CmdQuit( force=false:Logical ) : EditCmd
  METHODS
    method update_status
      if (force) status = "quit! (force-quit)"
      else       status = "quit"

    method execute
      if (ImageList.selected)
        if (not force and ImageList.selected.image.is_modified)
          status = "q (quit) [image is modified; ':w' or else ':q!' to force-quit]"
          return
        endIf

        if (ImageList.count > 1)
          if (ImageList.selected is ImageList.last_child)
            ImageList.remove( ImageList.selected )
            ImageList.select( ImageList.last_child->(as ImageListItem) )
          else
            local index = ImageList.selected.index
            ImageList.remove( ImageList.selected )
            ImageList.select( index )
          endIf
        else
          VimageUI.is_running = false
        endIf
      else
        VimageUI.is_running = false
      endIf
endClass

class CmdQuitAll( force=false:Logical ) : Cmd
  METHODS
    method update_status
      if (force) status = "qq! (force-quit all)"
      else       status = "qq (quit all)"

    method execute
      if (not force)
        contingent
          forEach (item in ImageList)
            necessary (not item->(as ImageListItem).image.is_modified)
          endForEach
        unsatisfied
          status = "qq (quit all) [modified images exist; ':w' each or else ':qq!' to force-quit]"
          return
        endContingent
      endIf
      VimageUI.is_running = false
endClass

class CmdRemove : EditCmd [singleton]
  METHODS
    method update_status
      if (ImageList.selected and ImageList.selected.image.file)
        status = "rm '$' image file from folder"(ImageList.selected.image.file)
      elseIf (ImageList.selected)
        status = "rm [no file associated with current image]"
      else
        status = "rm [no current image]"
      endIf

    method execute
      if (ImageList.selected and ImageList.selected.image.file)
        local file = ImageList.selected.image.file.value
        file.delete
        ImageList.remove_selected
      endIf
endClass

class CmdResetZoom : Cmd [singleton]
  METHODS
    method update_status
      status = "0 (reset zoom)"

    method execute
      ImageView.reset_zoom
      if (State.current instanceOf ZoomState)
        state = ImageListState
      endIf
endClass

class CmdResizeToSize( width:Int32?, height:Int32? ) : EditCmd
  METHODS
    method update_status
      use status = StatusBar
        status.print "resize "
        if (width and height)
          status.print "$x$"(width,height)
        elseIf (width)
          status.print "width $"(width)
        elseIf (height)
          status.print "height $"(height)
        endIf
        if (not ImageList.selected) status.print " [no image selected]"
      endUse

    method execute
      if (not ImageList.selected) return
      execute( ImageList.selected.image )

    method execute( image:Image )
      if (width)
        local width = this.width.value
        if (height)
          local height = this.height.value
          if (image.bitmap.size == XY(width,height)) return

          local bitmap = image.cloned_bitmap
          bitmap.resize( width, height )
        else
          local new_size = XY( width, image.bitmap.size.y*(width->Real64/image.bitmap.size.x) )
          if (image.bitmap.size == new_size) return

          local bitmap = image.cloned_bitmap
          bitmap.resize( new_size.x, new_size.y )
        endIf
      elseIf (height)
        local height = this.height.value
        local new_size = XY( image.bitmap.size.x*(height->Real64/image.bitmap.size.y), height )
        if (image.bitmap.size == new_size) return

        local bitmap = image.cloned_bitmap
        bitmap.resize( new_size.x, new_size.y )
      endIf

      ImageView.show( image )
endClass

class CmdResizeToScale( sx:Real?, sy:Real? ) : EditCmd
  METHODS
    method update_status
      use status = StatusBar
        status.print "resize to scale "
        if (sx and sy)
          status.print "$x$"(sx,sy)
        elseIf (sx)
          status.print "sx $"(sx)
        elseIf (sy)
          status.print "sy $"(sy)
        endIf
        if (not ImageList.selected) status.print " [no image selected]"
      endUse

    method execute
      if (not ImageList.selected) return
      execute( ImageList.selected.image )

    method execute( image:Image )
      local w, h : Int32?
      if (sx) w = (image.bitmap.width  * sx.value)->Int32
      if (sy) h = (image.bitmap.height * sy.value)->Int32
      CmdResizeToSize( w, h ).execute
endClass

class CmdRGB2HSB : EditCmd [singleton]
  METHODS
    method update_status
      if (ImageList.selected)
        status = "rgb2hsb"
      else
        status = "rgb2hsb [no image selected]"
      endIf

    method execute
      if (not ImageList.selected) return

      local bitmap = ImageList.selected.image.cloned_bitmap
      local n = bitmap.pixels.count
      native...
        @|RogueInt32* data  = $bitmap->pixels->as_int32s - 1;
         |
         |while (--$n >= 0)
         |{
         |  RogueInt32 argb = *(++data);
         |  int   a = argb & 0xFF000000;
         |  float r = ((argb >> 16) & 255) / 255.0f;
         |  float g = ((argb >> 8) & 255) / 255.0f;
         |  float b = (argb & 255) / 255.0f;
         |
         |  float maxrgb = (r >= g && r >= b) ? r : ((g >= b) ? g : b);
         |  float minrgb = (r <= g && r <= b) ? r : ((g <= b) ? g : b);
         |  float delta  = maxrgb - minrgb;
         |
         |  float brightness = maxrgb;
         |  float hue = 0.0f;
         |  float saturation = 0.0f;
         |
         |  if (maxrgb) saturation = delta / maxrgb;
         |
         |  if (delta)
         |  {
         |    if (r == maxrgb)      hue = (g - b) / delta;
         |    else if (g == maxrgb) hue = 2 + ((b - r) / delta);
         |    else                  hue = 4 + ((r - g) / delta);
         |
         |    hue *= 60;
         |    while (hue < 0)    hue += 360;
         |    while (hue >= 360) hue -= 360;
         |    hue /= 360;
         |  }
         |
         |  *data = a | (((int)(hue*255))<<16) | (((int)(saturation*255))<<8) | ((int)(brightness*255));
         |}
endClass

class CmdRotateCW : EditCmd [singleton]
  METHODS
    method update_status
      if (ImageList.selected)
        status = "r (rotate 90º clockwise)"
      else
        status = "r (rotate 90º clockwise) [no image selected]"
      endIf

    method execute
      if (ImageList.selected)
        local img = ImageList.selected.image
        img.cloned_bitmap.rotate_90( &cw )
        img.zoom = 0
        ImageView.mark_modified
        ImageView.min_zoom = 0
      endIf
endClass

class CmdRotateCCW : EditCmd [singleton]
  METHODS
    method update_status
      if (ImageList.selected)
        status = "r (rotate 90º counter-clockwise)"
      else
        status = "r (rotate 90º counter-clockwise) [no image selected]"
      endIf

    method execute
      if (ImageList.selected)
        local img = ImageList.selected.image
        img.cloned_bitmap.rotate_90( &ccw )
        img.zoom = 0
        ImageView.mark_modified
        ImageView.min_zoom = 0
      endIf
endClass


class CmdPasteAfter : EditCmd [singleton]
  METHODS
    method init

    method update_status
      status = "p (paste after)"

    method execute( repeat_count:Int32 )
      local bitmap : Bitmap
      if (Vimage.using_os_clipboard)
        bitmap = Clipboard.bitmap
      else
        bitmap = Vimage.clipboard
      endIf
      if (bitmap)
        loop repeat_count
          if (ImageList.selected)
            local before_index = ImageList.selected.index + 1
            ImageList.insert( Image(bitmap), before_index )
            ImageList.select( before_index )
          else
            ImageList.add( Image(bitmap) )
            ImageList.select( ImageList.count-1 )
          endIf
        endLoop
      else
        status = "p (paste after) [no image on clipboard]"
      endIf
endClass

class CmdPasteBefore : EditCmd [singleton]
  METHODS
    method init

    method update_status
      status = "P (paste before)"

    method execute( repeat_count:Int32 )
      local bitmap : Bitmap
      if (Vimage.using_os_clipboard)
        bitmap = Clipboard.bitmap
      else
        bitmap = Vimage.clipboard
      endIf
      if (bitmap)
        loop repeat_count
          if (ImageList.selected)
            local before_index = ImageList.selected.index
            ImageList.insert( Image(bitmap), before_index )
            ImageList.select( before_index )
          else
            ImageList.add( Image(bitmap) )
            ImageList.select( 0 )
          endIf
        endLoop
      else
        status = "P (paste before) [no image on clipboard]"
      endIf
endClass

class CmdRedo : Cmd [singleton]
  METHODS
    method update_status
      if (Vimage.redo_stack.count)
        status = "^R (redo)"
      else
        status = "^R (redo) [no commands to redo]"
      endIf

    method execute
      Vimage.redo
endClass

class CmdRedoU : Cmd [singleton]
  METHODS
    method update_status
      if (Vimage.redo_stack.count)
        status = "U (redo)"
      else
        status = "U (redo) [no commands to redo]"
      endIf

    method execute
      Vimage.redo
endClass

class CmdRepeatLast : Cmd [singleton]
  PROPERTIES
    repeat_count : Int32

  METHODS
    method allowed_in_macro->Logical
      return false

    method call
      local n = which{ Vimage.repeat_count || Vimage.last_repeat_count }
      prior.call
      Vimage.last_repeat_count = n

    method update_status
      if (not Vimage.last_cmd)
        status = ". [no editing commands to repeat]"
      endIf

    method execute
      if (Vimage.last_cmd)
        local n = which{ Vimage.repeat_count || Vimage.last_repeat_count }
        Vimage.repeat_count = n
        Vimage.execute( Vimage.last_cmd )
      endIf
endClass

class CmdSelectIndex( index:Int32 ) : Cmd [singleton]
  METHODS
    method update_status
      if (index >= 0 and index < ImageList.count)
        status = "select image $"(index)
      else
        status = "select image $ [index out of bounds]"(index)
      endIf

    method execute
      if (ImageList.count == 0) return

      local index = index.clamped( 0, ImageList.count-1 )
      ImageList.select( index )
endClass

class CmdSetBGColor( color:ColorValue ) : Cmd [singleton]
  METHODS
    method update_status
      if (color.is_random) status = "bg random"
      else                 status = "bg " + color

    method execute
      Vimage.bg_color = color
endClass

class CmdSetRepeatCount( n:Int32? ) : Cmd
  METHODS
    method execute
      Vimage.repeat_count = n
endClass


class CmdScroll( dx:Real, dy:Real ) : Cmd
  METHODS
    method update_status
      if (dx > 0) status = "l (scroll right)"
      elseIf (dx < 0) status = "h (scroll left)"
      elseIf (dy > 0) status = "j (scroll down)"
      else            status = "k (scroll up)"

    method execute
      ImageView.scroll( RealXY(dx,dy) )
      if (State.current not instanceOf ZoomState)
        if (ImageView.image and ImageView.image.zoom != ImageView.default_zoom)
          state = ZoomState
        endIf
      endIf

endClass

class CmdSplit( dims:XY ) : EditCmd
  METHODS
    method update_status
      local tiles_wide = dims.x
      local tiles_high = dims.y
      local total = tiles_wide * tiles_high

      use status = StatusBar
        status.print "split $x$ -> $ images"(tiles_wide,tiles_high,total)
        if (ImageList.count == 0)
          status.print " [no image selected]"
          return
        elseIf (tiles_wide < 1 or tiles_high < 1)
          status.print " [invalid split count]"
          return
        else
          local image = ImageList.selected.image
          local bitmap = image.bitmap
          if (bitmap.width % tiles_wide)
            status.print " [image width must be an even multiple of $]"(tiles_wide)
            return
          endIf
          if (bitmap.height % tiles_high)
            status.print " [image height must be an even multiple of $]"(tiles_high)
            return
          endIf
        endIf
      endUse


    method execute
      local tiles_wide = dims.x
      local tiles_high = dims.y
      local total = tiles_wide * tiles_high

      local image  : Image
      local bitmap : Bitmap

      if (ImageList.count == 0)
        return
      elseIf (tiles_wide < 1 or tiles_high < 1)
        return
      else
        image = ImageList.selected.image
        bitmap = image.bitmap
        if (bitmap.width % tiles_wide)
          return
        endIf
        if (bitmap.height % tiles_high)
          return
        endIf
      endIf

      local index = ImageList.selected.index
      local digits = 1
      local limit = 10
      while (limit < total)
        ++digits
        limit *= 10
      endWhile
      local fmt = "0$"(digits)

      local w = bitmap.width / tiles_wide
      local h = bitmap.height / tiles_high

      forEach (j in tiles_high-1 downTo 0)
        forEach (i in tiles_wide-1 downTo 0)
          local seq = j*tiles_wide + i
          local tile = Bitmap( bitmap, Box(i*w,j*h,w,h) )
          local img : Image
          if (image.file)
            img = Image( tile, image.file.value.appending("-$"(seq.format(fmt))) ).[ is_modified=true ]
          elseIf (image.name)
            img = Image( tile, "$-$"(image.name,seq.format(fmt)) )
          else
            img = Image( tile, seq.format(fmt) )
          endIf
          ImageList.insert( img, index )
        endForEach
      endForEach

      ImageList.remove( ImageList.selected )
      ImageList.select( index )

endClass

class CmdStack : EditCmd [singleton]
  METHODS
    method update_status
      use status = StatusBar
        status.print "t (stack images)"
        if (ImageList.selected)
          local available = ImageList.count - ImageList.selected.index
          local n = which{ Vimage.repeat_count || 2 }
          if (n > available) status.print " [not enough images]"
        else
          status.print " [no image selected]"
        endIf
      endUse

    method execute( n:Int32 )
      if (n == 1) n = 2

      local available : Int32
      if (ImageList.selected)
        available = ImageList.count - ImageList.selected.index
      endIf
      if (n <= 1 or available < n) return

      local original_index = ImageList.selected.index

      use list = WorkList<<Image>>
        loop (n)
          local index = ImageList.selected.index
          list.add( ImageList.selected.image )
          ImageList.remove( ImageList.selected )
          if (index < ImageList.count)
            ImageList.select( index )
          elseIf (ImageList.count > 0)
            ImageList.select( ImageList.last_child->(as ImageListItem) )
            escapeLoop
          else
            ImageList.select( null )
            escapeLoop
          endIf
        endLoop

        local result = list.remove_last.cloned_bitmap
        forEach (image in list step -1)
          image.bitmap.blit( result, 0, 0, BitmapBlitFn.ALPHA )
        endForEach

        local result_image = Image( result )
        ImageList.insert( result_image, original_index )
        ImageList.select( result_image )

      endUse

      ImageView.mark_modified
endClass

class CmdSwap( a:Int32, b:Int32 ) : EditCmd
  METHODS
    method update_status
      status = "swap channels $<>$"("bgra"[a],"bgra"[b])

    method execute
      if ((a or b) and ImageView.image)
        local bitmap = ImageView.image.cloned_bitmap

        local a_shift = a * 8
        local b_shift = b * 8
        forEach (color at i in rewriter=bitmap.pixels.rewriter)
          local a = (color.argb :>>>: a_shift) & 0xFF
          local b = (color.argb :>>>: b_shift) & 0xFF
          local argb = color.argb & !(0xFF:<<:a_shift) & !(0xFF:<<:b_shift)
          argb |= (a :<<: b_shift) | (b :<<: a_shift)
          rewriter.write( Color(argb) )
        endForEach

        ImageView.mark_modified
      endIf
endClass

class CmdToggleClipboard : Cmd [singleton]
  METHODS
    method update_status
      if (Vimage.using_os_clipboard)
        status = ''" (toggle clipboard) [now using internal clipboard]''
      else
        status = ''" (toggle clipboard) [now using OS clipboard]''
      endIf

    method execute
      Vimage.using_os_clipboard = not Vimage.using_os_clipboard
endClass

class CmdUndo : Cmd [singleton]
  METHODS
    method update_status
      if (Vimage.undo_stack.count)
        status = "u (undo)"
      else
        status = "u (undo) [no commands to undo]"
      endIf

    method execute
      Vimage.undo
endClass

class CmdWrite : EditCmd [singleton]
  METHODS
    method execute
      local filepath : String
      if (ImageList.selected.image.file)
        filepath = ImageList.selected.image.file.value.filepath
      else
        status = "w [missing filepath]"
        return
      endIf

      local file = File( filepath )
      local image = ImageList.selected.image
      image.name = file.filepath
      local bitmap = image.bitmap
      local ext = (File(filepath).extension.to_lowercase)
      which (ext)
        case "png"
          file.save( bitmap.to_png_bytes )
        case "jpg", ".jpeg"
          file.save( bitmap.to_jpeg_bytes )
        others
          status = "[saving image type '$' is unsupported]"(ext)
          return
      endWhich
      status = ''"$" [$x$, $ bytes] written''(filepath,bitmap.width,bitmap.height,file.size.format(","))

      image.is_modified = false
      ImageList.selected.request_redraw
      TitleBar.request_redraw
endClass

class CmdSave : EditCmd [singleton]
  METHODS
    method execute
      local filepath : String
      if (ImageList.selected.image.file)
        filepath = ImageList.selected.image.file.value.filepath
      else
        status = "save [missing filepath]"
        return
      endIf

      CmdWrite.execute
endClass

class CmdWriteAll : Cmd [singleton]
  METHODS
    method execute( ignore_repeat_count:Int32 )
      VimageUI.actions += ActionWriteAll( this )
endClass

class CmdYank : Cmd [singleton]
  METHODS
    method update_status
      if (ImageList.selected)
        set_status( "y (copy image to clipboard)" )
      else
        set_status( "y [no image to copy]" )
      endIf

    method execute( ignore_repeat_count:Int32 )
      if (ImageList.selected)
        if (Vimage.using_os_clipboard)
          Clipboard.bitmap = ImageList.selected->(as ImageListItem).image.bitmap
        else
          Vimage.clipboard = ImageList.selected->(as ImageListItem).image.bitmap
        endIf
      endIf
endClass

class CmdZoomIn : Cmd [singleton]
  METHODS
    method update_status
      status = "z (zoom in)"

    method execute
      ImageView.zoom_in
      if (ImageView.image)
        if (ImageView.image.zoom == ImageView.default_zoom)
          if (State.current is not ImageListState)
            State.change_state( ImageListState )
          endIf
        else
          if (State.current is not ZoomState)
            State.change_state( ZoomState )
          endIf
        endIf
      endIf
endClass

class CmdZoomOut : Cmd [singleton]
  METHODS
    method update_status
      status = "Z (zoom out)"

    method execute
      ImageView.zoom_out
      if (ImageView.image)
        if (ImageView.image.zoom == ImageView.default_zoom)
          if (State.current is not ImageListState)
            State.change_state( ImageListState )
          endIf
        else
          if (State.current is not ZoomState)
            State.change_state( ZoomState )
          endIf
        endIf
      endIf
endClass
