library Vimage

class BlitModeAND : BitmapBlitFn [singleton]
  METHODS
    method call( src:Bitmap, src_x1:Int, src_y1:Int, dest:Bitmap, dest_x1:Int, dest_y1:Int, blit_width:Int, blit_height:Int )
      local src_width = src.width
      local dest_width = dest.width
      native @|RogueInt32* src_start  = $src->pixels->as_int32s + ($src_y1 * $src_width + $src_x1);
              |RogueInt32* src_limit  = src_start + $blit_width;
              |RogueInt32* dest_start = $dest->pixels->as_int32s + ($dest_y1 * $dest_width + $dest_x1);
              |
              |while (--$blit_height >= 0)
              |{
              |  RogueInt32* src  = src_start - 1;
              |  RogueInt32* dest = dest_start;
              |  while (++src < src_limit)
              |  {
              |    *(dest++) &= *src;
              |  }
              |  src_start  += $src_width;
              |  src_limit  += $src_width;
              |  dest_start += $dest_width;
              |}
endClass

class BlitModeMultiply : BitmapBlitFn [singleton]
  METHODS
    method call( src:Bitmap, src_x1:Int, src_y1:Int, dest:Bitmap, dest_x1:Int, dest_y1:Int, blit_width:Int, blit_height:Int )
      local src_width = src.width
      local dest_width = dest.width
      native @|RogueInt32* src_start  = $src->pixels->as_int32s + ($src_y1 * $src_width + $src_x1);
              |RogueInt32* src_limit  = src_start + $blit_width;
              |RogueInt32* dest_start = $dest->pixels->as_int32s + ($dest_y1 * $dest_width + $dest_x1);
              |
              |while (--$blit_height >= 0)
              |{
              |  RogueInt32* src  = src_start - 1;
              |  RogueInt32* dest = dest_start;
              |  while (++src < src_limit)
              |  {
              |    RogueInt32 c1 = *src;
              |    RogueInt32 c2 = *dest;
              |    RogueInt32 a = ((((c1 >> 24) & 255) * ((c2 >> 24) & 255)) / 255) << 24;
              |    RogueInt32 r = ((((c1 >> 16) & 255) * ((c2 >> 16) & 255)) / 255) << 16;
              |    RogueInt32 g = ((((c1 >>  8) & 255) * ((c2 >>  8) & 255)) / 255) << 8;
              |    RogueInt32 b = ((( c1        & 255) * ( c2        & 255)) / 255);
              |    *(dest++) = (a | r | g | b);
              |  }
              |  src_start  += $src_width;
              |  src_limit  += $src_width;
              |  dest_start += $dest_width;
              |}
endClass

class BlitModeOR : BitmapBlitFn [singleton]
  METHODS
    method call( src:Bitmap, src_x1:Int, src_y1:Int, dest:Bitmap, dest_x1:Int, dest_y1:Int, blit_width:Int, blit_height:Int )
      local src_width = src.width
      local dest_width = dest.width
      native @|RogueInt32* src_start  = $src->pixels->as_int32s + ($src_y1 * $src_width + $src_x1);
              |RogueInt32* src_limit  = src_start + $blit_width;
              |RogueInt32* dest_start = $dest->pixels->as_int32s + ($dest_y1 * $dest_width + $dest_x1);
              |
              |while (--$blit_height >= 0)
              |{
              |  RogueInt32* src  = src_start - 1;
              |  RogueInt32* dest = dest_start;
              |  while (++src < src_limit)
              |  {
              |    *(dest++) |= *src;
              |  }
              |  src_start  += $src_width;
              |  src_limit  += $src_width;
              |  dest_start += $dest_width;
              |}
endClass

class BlitModeXOR : BitmapBlitFn [singleton]
  METHODS
    method call( src:Bitmap, src_x1:Int, src_y1:Int, dest:Bitmap, dest_x1:Int, dest_y1:Int, blit_width:Int, blit_height:Int )
      local src_width = src.width
      local dest_width = dest.width
      native @|RogueInt32* src_start  = $src->pixels->as_int32s + ($src_y1 * $src_width + $src_x1);
              |RogueInt32* src_limit  = src_start + $blit_width;
              |RogueInt32* dest_start = $dest->pixels->as_int32s + ($dest_y1 * $dest_width + $dest_x1);
              |
              |while (--$blit_height >= 0)
              |{
              |  RogueInt32* src  = src_start - 1;
              |  RogueInt32* dest = dest_start;
              |  while (++src < src_limit)
              |  {
              |    *(dest++) ^= (*src & 0x00FFffFF);
              |  }
              |  src_start  += $src_width;
              |  src_limit  += $src_width;
              |  dest_start += $dest_width;
              |}
endClass

class BlitModeExtract( min:Int[], max:Int[] ) : BitmapBlitFn
  METHODS
    method call( src:Bitmap, src_x1:Int, src_y1:Int, dest:Bitmap, dest_x1:Int, dest_y1:Int, blit_width:Int, blit_height:Int )
      local src_width = src.width
      local dest_width = dest.width
      native @|RogueInt*   min = $min->as_ints;
              |RogueInt*   max = $max->as_ints;
              |
              |RogueInt32* src_start  = $src->pixels->as_int32s + ($src_y1 * $src_width + $src_x1);
              |RogueInt32* src_limit  = src_start + $blit_width;
              |RogueInt32* dest_start = $dest->pixels->as_int32s + ($dest_y1 * $dest_width + $dest_x1);
              |
              |while (--$blit_height >= 0)
              |{
              |  RogueInt32* src  = src_start - 1;
              |  RogueInt32* dest = dest_start;
              |  while (++src < src_limit)
              |  {
              |    RogueInt32 argb = *src;
              |    RogueInt32 a = ((argb >> 24) & 255);
              |    RogueInt32 r = ((argb >> 16) & 255);
              |    RogueInt32 g = ((argb >>  8) & 255);
              |    RogueInt32 b = ( argb        & 255);
              |    if (a >= min[0] && a <= max[0] &&
              |        r >= min[1] && r <= max[1] &&
              |        g >= min[2] && g <= max[2] &&
              |        b >= min[3] && b <= max[3])
              |    {
              |      *(dest++) = argb;
              |    }
              |    else
              |    {
              |      *(dest++) = 0;
              |    }
              |  }
              |  src_start  += $src_width;
              |  src_limit  += $src_width;
              |  dest_start += $dest_width;
              |}
endClass

