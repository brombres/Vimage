module Vimage

class VMGKeyHandler
  PROPERTIES
    handler   : Function(KeyEvent)
    new_state : VMGState

  METHODS
    method init

    method init( handler )

    method init( new_state )

    method init( handler, new_state )

    method execute
      local n = which{ Vimage.repeat_count || 1 }
      Vimage.repeat_count = null
      loop (n)
        on_execute
      endLoop

    method on( e:KeyEvent )
      if (handler) handler(e)
      if (new_state) VMGState.change_state( new_state )

    method on_execute
      noAction

    method set_state( new_state:VMGState )
      VMGState.current.change_state( new_state )

    method set_status( text:String )
      if (Vimage.repeat_count)
        VMGStatusBar.text = "$$"(Vimage.repeat_count,text)
      else
        VMGStatusBar.text = text
      endIf
endClass

class VMGKeyHandlerColon : VMGKeyHandler [singleton]
  METHODS
    method on( e:KeyEvent )
      Vimage.repeat_count = null
      status = ":"
      VimageUI.command.clear
      state = EnterCmdLineState()
endClass

class VMGKeyHandlerQBuffer : VMGKeyHandler [singleton]
  METHODS
    method on( e:KeyEvent )
      status = "q (quit)"
      VimageUI.is_running = false
endClass

class VMGKeyHandlerJBuffer : VMGKeyHandler [singleton]
  METHODS
    method on( e:KeyEvent )
      status = "j (down)"
      execute

    method on_execute
      if local current = VMGImageList.selected
        if (current.next)
          VMGImageList.select( current.next->(as VMGImageListItem) )
        endIf
      endIf
endClass

class VMGKeyHandlerPaste : VMGKeyHandler [singleton]
  METHODS
    method on( e:KeyEvent )
      if (Vimage.clipboard)
        local cmd = VMGCmdPaste( which{Vimage.repeat_count||1} )
        Vimage.repeat_count = null
        Vimage.execute( cmd )
      else
        status = "$p (paste) [empty clipboard]"(Vimage.repeat_count_string)
      endIf
endClass

class VMGKeyHandlerPeriod : VMGKeyHandler [singleton]
  METHODS
    method on( e:KeyEvent )
      if (Vimage.cmd)
        Vimage.execute( Vimage.cmd )
      endIf
endClass

class VMGKeyHandlerShiftJBuffer : VMGKeyHandler [singleton]
  METHODS
    method on( e:KeyEvent )
      status = "J (shift down)"
      execute

    method on_execute
      if local current = VMGImageList.selected
        if local index = VMGImageList.locate( current )
          Vimage.save_undo
          VMGImageList.remove( current )
          VMGImageList.insert( current, index+1 )
          VMGImageList.request_layout
        endIf
      endIf
endClass

class VMGKeyHandlerKBuffer : VMGKeyHandler [singleton]
  METHODS
    method on( e:KeyEvent )
      status = "k (up)"
      execute

    method on_execute
      if local current = VMGImageList.selected
        forEach (child in VMGImageList.children)
          if (child.next is current)
            VMGImageList.select( child->(as VMGImageListItem) )
            escapeForEach
          endIf
        endForEach
      endIf
endClass

class VMGKeyHandlerShiftKBuffer : VMGKeyHandler [singleton]
  METHODS
    method on( e:KeyEvent )
      status = "K (shift up)"
      execute

    method on_execute
      if local current = VMGImageList.selected
        if local index = VMGImageList.locate( current )
          if (index > 0)
            Vimage.save_undo
            VMGImageList.remove( current )
            VMGImageList.insert( current, index-1 )
            VMGImageList.request_layout
          endIf
        endIf
      endIf
endClass

class VMGKeyHandlerZ : VMGKeyHandler [singleton]
  METHODS
    method on( e:KeyEvent )
      status = "z (zoom in)"
      execute

    method on_execute
      VMGImageView.zoom_in
      if (VMGImageView.image)
        if (VMGImageView.image.zoom == VMGImageView.default_zoom)
          if (VMGState.current is not ImageListState)
            VMGState.change_state( ImageListState )
          endIf
        else
          if (VMGState.current is not ZoomState)
            VMGState.change_state( ZoomState )
          endIf
        endIf
      endIf
endClass

class VMGKeyHandlerShiftZ : VMGKeyHandler [singleton]
  METHODS
    method on( e:KeyEvent )
      status = "z (zoom out)"
      execute

    method on_execute
      VMGImageView.zoom_out
      if (VMGImageView.image)
        if (VMGImageView.image.zoom == VMGImageView.default_zoom)
          if (VMGState.current is not ImageListState)
            VMGState.change_state( ImageListState )
          endIf
        else
          if (VMGState.current is not ZoomState)
            VMGState.change_state( ZoomState )
          endIf
        endIf
      endIf
endClass

class VMGKeyHandlerHFlip : VMGKeyHandler [singleton]
  METHODS
    method on( e:KeyEvent )
      execute

    method on_execute
      Vimage.execute( VMGCmdFlipH )
endClass

class VMGKeyHandlerVFlip : VMGKeyHandler [singleton]
  METHODS
    method on( e:KeyEvent )
      execute

    method on_execute
      Vimage.execute( VMGCmdFlipV )
endClass

class VMGKeyHandlerRotate90CW : VMGKeyHandler [singleton]
  METHODS
    method on( e:KeyEvent )
      execute

    method on_execute
      Vimage.execute( VMGCmdRotateCW )
endClass

class VMGKeyHandlerRotate90CCW : VMGKeyHandler [singleton]
  METHODS
    method on( e:KeyEvent )
      execute

    method on_execute
      Vimage.execute( VMGCmdRotateCCW )
endClass

class VMGKeyHandlerStack : VMGKeyHandler [singleton]
  METHODS
    method on( e:KeyEvent )
      status = "s (stack images)"
      execute

    method execute
      local cmd = VMGCmdStack( which{Vimage.repeat_count||2} )
      Vimage.repeat_count = null
      Vimage.execute( cmd )
endClass

class VMGKeyHandlerJoinH : VMGKeyHandler [singleton]
  METHODS
    method on( e:KeyEvent )
      status = "n (join horizontal)"
      execute

    method execute
      local cmd = VMGCmdJoin( XY( which{Vimage.repeat_count||2}, 1 ) )
      Vimage.repeat_count = null
      Vimage.execute( cmd )
endClass

class VMGKeyHandlerJoinV : VMGKeyHandler [singleton]
  METHODS
    method on( e:KeyEvent )
      status = "N (join vertical)"
      execute

    method execute
      local cmd = VMGCmdJoin( XY( 1, which{Vimage.repeat_count||2} ) )
      Vimage.repeat_count = null
      Vimage.execute( cmd )
endClass

class VMGKeyHandlerUndo : VMGKeyHandler [singleton]
  METHODS
    method on( e:KeyEvent )
      status = "u (undo)"
      execute

    method on_execute
      Vimage.undo
endClass

