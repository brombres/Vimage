module Vimage

class KeyHandler
  PROPERTIES
    handler   : Function(KeyEvent)
    new_state : State

  METHODS
    method init

    method init( handler )

    method init( new_state )

    method init( handler, new_state )

    method execute
      local n = which{ Vimage.repeat_count || 1 }
      Vimage.repeat_count = null
      loop (n)
        on_execute
      endLoop

    method on( e:KeyEvent )
      if (handler) handler(e)
      if (new_state) State.change_state( new_state )

    method on_execute
      noAction

    method set_state( new_state:State )
      State.current.change_state( new_state )

    method set_status( text:String )
      if (Vimage.repeat_count)
        StatusBar.text = "$$"(Vimage.repeat_count,text)
      else
        StatusBar.text = text
      endIf
endClass

class KeyHandlerColon : KeyHandler [singleton]
  METHODS
    method on( e:KeyEvent )
      Vimage.repeat_count = null
      status = ":"
      VimageUI.command.clear
      state = EnterCmdLineState()
endClass

class KeyHandlerQBuffer : KeyHandler [singleton]
  METHODS
    method on( e:KeyEvent )
      status = "q (quit)"
      VimageUI.is_running = false
endClass

class KeyHandlerJBuffer : KeyHandler [singleton]
  METHODS
    method on( e:KeyEvent )
      status = "j (down)"
      execute

    method on_execute
      if local current = ImageList.selected
        if (current.next)
          ImageList.select( current.next->(as ImageListItem) )
        endIf
      endIf
endClass

class KeyHandlerPaste : KeyHandler [singleton]
  METHODS
    method on( e:KeyEvent )
      if (Vimage.clipboard)
        local cmd = CmdPaste( which{Vimage.repeat_count||1} )
        Vimage.repeat_count = null
        Vimage.execute( cmd )
      else
        status = "$p (paste) [empty clipboard]"(Vimage.repeat_count_string)
      endIf
endClass

class KeyHandlerPeriod : KeyHandler [singleton]
  METHODS
    method on( e:KeyEvent )
      if (Vimage.cmd)
        Vimage.execute( Vimage.cmd )
      endIf
endClass

class KeyHandlerShiftJBuffer : KeyHandler [singleton]
  METHODS
    method on( e:KeyEvent )
      status = "J (shift down)"
      execute

    method on_execute
      if local current = ImageList.selected
        if local index = ImageList.locate( current )
          Vimage.save_undo
          ImageList.remove( current )
          ImageList.insert( current, index+1 )
          ImageList.request_layout
        endIf
      endIf
endClass

class KeyHandlerKBuffer : KeyHandler [singleton]
  METHODS
    method on( e:KeyEvent )
      status = "k (up)"
      execute

    method on_execute
      if local current = ImageList.selected
        forEach (child in ImageList.children)
          if (child.next is current)
            ImageList.select( child->(as ImageListItem) )
            escapeForEach
          endIf
        endForEach
      endIf
endClass

class KeyHandlerShiftKBuffer : KeyHandler [singleton]
  METHODS
    method on( e:KeyEvent )
      status = "K (shift up)"
      execute

    method on_execute
      if local current = ImageList.selected
        if local index = ImageList.locate( current )
          if (index > 0)
            Vimage.save_undo
            ImageList.remove( current )
            ImageList.insert( current, index-1 )
            ImageList.request_layout
          endIf
        endIf
      endIf
endClass

class KeyHandlerZ : KeyHandler [singleton]
  METHODS
    method on( e:KeyEvent )
      status = "z (zoom in)"
      execute

    method on_execute
      ImageView.zoom_in
      if (ImageView.image)
        if (ImageView.image.zoom == ImageView.default_zoom)
          if (State.current is not ImageListState)
            State.change_state( ImageListState )
          endIf
        else
          if (State.current is not ZoomState)
            State.change_state( ZoomState )
          endIf
        endIf
      endIf
endClass

class KeyHandlerShiftZ : KeyHandler [singleton]
  METHODS
    method on( e:KeyEvent )
      status = "z (zoom out)"
      execute

    method on_execute
      ImageView.zoom_out
      if (ImageView.image)
        if (ImageView.image.zoom == ImageView.default_zoom)
          if (State.current is not ImageListState)
            State.change_state( ImageListState )
          endIf
        else
          if (State.current is not ZoomState)
            State.change_state( ZoomState )
          endIf
        endIf
      endIf
endClass

class KeyHandlerHFlip : KeyHandler [singleton]
  METHODS
    method on( e:KeyEvent )
      execute

    method on_execute
      Vimage.execute( CmdFlipH )
endClass

class KeyHandlerVFlip : KeyHandler [singleton]
  METHODS
    method on( e:KeyEvent )
      execute

    method on_execute
      Vimage.execute( CmdFlipV )
endClass

class KeyHandlerRotate90CW : KeyHandler [singleton]
  METHODS
    method on( e:KeyEvent )
      execute

    method on_execute
      Vimage.execute( CmdRotateCW )
endClass

class KeyHandlerRotate90CCW : KeyHandler [singleton]
  METHODS
    method on( e:KeyEvent )
      execute

    method on_execute
      Vimage.execute( CmdRotateCCW )
endClass

class KeyHandlerStack : KeyHandler [singleton]
  METHODS
    method on( e:KeyEvent )
      status = "s (stack images)"
      execute

    method execute
      local cmd = CmdStack( which{Vimage.repeat_count||2} )
      Vimage.repeat_count = null
      Vimage.execute( cmd )
endClass

class KeyHandlerJoinH : KeyHandler [singleton]
  METHODS
    method on( e:KeyEvent )
      status = "n (join horizontal)"
      execute

    method execute
      local cmd = CmdJoin( XY( which{Vimage.repeat_count||2}, 1 ) )
      Vimage.repeat_count = null
      Vimage.execute( cmd )
endClass

class KeyHandlerJoinV : KeyHandler [singleton]
  METHODS
    method on( e:KeyEvent )
      status = "N (join vertical)"
      execute

    method execute
      local cmd = CmdJoin( XY( 1, which{Vimage.repeat_count||2} ) )
      Vimage.repeat_count = null
      Vimage.execute( cmd )
endClass

class KeyHandlerUndo : KeyHandler [singleton]
  METHODS
    method on( e:KeyEvent )
      status = "u (undo)"
      execute

    method on_execute
      Vimage.undo
endClass

