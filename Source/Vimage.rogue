#================================================================================
# Vimage.rogue
# February 19, 2023
#
# a            - Left / Cursor Images<-Layers
# A            - Left (BR Corner) / Layer moves out to become image
# b color      - BG COLOR [V|RGB|ARGB|RRGGBB|AARRGGBB|transparent|black|white|...]
# B            -
# c [WxH|WASD] - Crop/expand, [ENTER|ESC]
# C
# d            - Right / Cursor Images->Layers
# D            - Right (BR Corner) / Image becomes layer of underlying image (same as t)
# e
# E
# f color      - FG COLOR [V|RGB|ARGB|RRGGBB|AARRGGBB|transparent|black|white|...]
# F
# g
# G
# h            - Hflip
# H
# i
# I
# j WxH        - un(j)oin / Split into multiple images
# J [h|v|WxH]  - JOIN (splice)
# k
# K
# l
# L
# m
# M
# n [WxH]      - New [previous/default size]
# N
# o pattern    - Open file or files; inserts above current buffer
# O            - Open using built-in file dialog
# p            - Paste - new image/layer from clipboard stacked above current image/layer
# P            - Paste below
# q            - Quit (close) current buffer
# Q            - Quit (close) all buffers
# r            - Rotate 90ยบ CW
# R            - Rotate 90ยบ CCW
# s            - Down / Next Image / Next Layer
# S            - Down (BR Corner) / Move image/layer down 1 level
# t            - S(T)ACK - cur buffer becomes layer of image underneath
# T
# u            - UNDO
# U
# v            - Vflip
# V
# w            - Up / Previous Image
# W            - Up (BR Corner) / Move image/layer up 1 level
# x
# X
# y [rgbay]    - Yank (copy) R, G, B, A, or Y=all channels to clipboard.
# Y
# z            - ZOOM IN  (scale * 2)
# Z            - ZOOM OUT (scale / 2)
# :swap [argb][argb01]
#================================================================================

$define VERSION "0.1"
$define DATE    "February 19, 2023"

$requireRogue "2.12"

uses Console/CommandLineParser
uses Bitmap
uses Bitmap/IO
uses Epilog

$include VMGImage
$include VMGImageList
$include VMGImageView
$include VMGKeyHandler
$include VMGState
$include VMGStatusBar
$include VMGTitleBar
$include VMGUI

try
  Vimage( System.command_line_arguments )
catch (error:Error)
  Console.error.println error
  System.exit 1
endTry

class Vimage
  METHODS
    method init( args:String[] )
      local command = parse_args( args )

      #trace command
      # has //options and possibly //args

      if (command//options//help)
        print_usage
        System.exit 0
      endIf

      VMGUI.run

    method parse_args( args:String[] )->Value
      local command = CommandLineParser().
      [
        #option( "--flag",     &alias="-f" )
        option( "--help",     &aliases=["-h","-?"] )
        #option( "--setting=", &alias="-s" )
      ].parse( args )
      return command

    method print_usage
      println "Vimage v$"(VERSION)
      println "$"(DATE)
      println

      println @|USAGE
               |  vimage [OPTIONS]
               |
               |OPTIONS
               |  --help, -h, -?
               |    Show this help text.
endClass
