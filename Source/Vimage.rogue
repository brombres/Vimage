#================================================================================
# Vimage.rogue
#
# Started: February 19, 2023
#================================================================================

$define VERSION "1.33"
$define DATE    "May 16, 2025"

$requireRogue "2.34"

library Vimage

uses Console/CommandLineParser
uses Graphics
uses Graphics/BitmapIO
uses Control/Action
uses Epilog
uses UI
uses Utility/Clipboard

$include Actions
$include BlitMode
$include Cmd
$include CmdLineHandler
$include ColorValue
$include Image
$include ImageList
$include ImageView
$include KeyHandler
$include ColorGradient
$include ColorLerp
$include Size
$include State
$include StatusBar
$include TitleBar
$include VimageUI

#nativeHeader @|#include "../Source/ObjC-Interface.h"

try
  #native @|ObjC_check_file( "Test.txt" );
  Vimage.init( System.command_line_arguments )
catch (error:Error)
  Console.error.println error
  System.exit 1
endTry

class Vimage [singleton]
  DEFINITIONS
    MAX_UNDOS = 50

  PROPERTIES
    clipboard          : Bitmap
    clipboard_file     : File?
    using_os_clipboard = true
    repeat_count       : Int?
    last_repeat_count  : Int
    last_cmd           : Cmd
    anchor             = Anchor.CENTER
    bg_color           = ColorValue( Color(0) )
    hard_alpha         : Logical
    undo_stack         = @[]
    redo_stack         = @[]

    macro              = Cmd[]
    recording_macro    : Logical

  METHODS
    method init( args:String[] )
      local command = parse_args( args )

      #trace command
      # has //options and possibly //args

      if (command//options//help)
        print_usage
        System.exit 0
      endIf

      local filenames = command//args.to_list<<String>>
      filenames.sort( (a,b)=>a.compare_to(b,&ignore_case) < 0 )

      forEach (filepath in filenames)
        local file = File( filepath )
        if (file.is_folder)
          local files = Files( file.filepath )
          files.add( "*.bmp" )
          files.add( "*.heic" )
          files.add( "*.jpg" )
          files.add( "*.jpeg" )
          files.add( "*.png" )
          files.add( "*.tif" )
          files.add( "*.tiff" )
          files.add( "*.webp" )
          local nested_filepaths = files->String[]
          nested_filepaths.sort( (a,b)=>a.compare_to(b,&ignore_case) < 0 )
          forEach (nested_filepath in nested_filepaths)
            ImageList.add( Image(File(nested_filepath)) )
          endForEach
        else
          ImageList.add( Image(file) )
        endIf
      endForEach

      if (ImageList.count)
        ImageList.select( ImageList.first_child->(as ImageListItem) )
      endIf

      VimageUI.run

    method execute( cmd:Cmd, &skip_undo_save_state )
      if (cmd.is_edit)
        if (not skip_undo_save_state) save_undo
        last_cmd = cmd
      endIf
      if (recording_macro and cmd.allowed_in_macro) macro.add( cmd )
      cmd()

    method parse_args( args:String[] )->Variant
      local command = CommandLineParser().
      [
        #option( "--flag",     &alias="-f" )
        option( "--help",     &aliases=["-h","-?"] )
        #option( "--setting=", &alias="-s" )
      ].parse( args )
      return command

    method print_usage
      println "Vimage v$"(VERSION)
      println "$ by Brom Bresenham"(DATE)
      println

      println @|USAGE
               |  vimage [OPTIONS] [filepaths]
               |
               |OPTIONS
               |  --help, -h, -?
               |    Show this help text.

    method read_and_reset_repeat_count->Int
      local result = which{ repeat_count || 1 }.clamped_low(1)
      repeat_count = null
      return result

    method repeat_count_string->String
      if (repeat_count) return repeat_count.value + ""
      else              return ""

    method save_undo
      if (undo_stack.count > MAX_UNDOS) undo_stack.remove_first
      local state  = ImageList->Variant
      undo_stack.add( state )
      redo_stack.clear

    method undo
      if (undo_stack.is_empty) return
      redo_stack.add( ImageList->Variant )  # save current state as a redo
      ImageList.unpack( undo_stack.remove_last )

    method redo
      if (redo_stack.is_empty) return
      undo_stack.add( ImageList->Variant )  # save current state as an undo
      ImageList.unpack( redo_stack.remove_last )

endClass
