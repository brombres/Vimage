#================================================================================
# Vimage.rogue
# February 19, 2023
#
# a
# A
# b
# B            -
# c [WxH|WASD] - Crop/expand, [ENTER|ESC]
# C
# d
# D
# e
# E
# f            - Horizontal Flip
# F            - Vertical Flip
# g
# G
# h            - Left / Cursor Images<-Layers
# H            - Left (BR Corner) / Layer moves out to become image
# i
# I
# j            - Down / Next Image / Next Layer
# J            - Down (BR Corner) / Move image/layer down 1 level
# k            - Up / Previous Image
# K            - Up (BR Corner) / Move image/layer up 1 level
# l            - Right / Cursor Images->Layers
# L            - Right (BR Corner) / Image becomes layer of underlying image (same as t)
# m
# M
# n
# N
# o pattern    - Open file or files; inserts above current buffer
# O            - Open using built-in file dialog
# p            - Paste - new image/layer from clipboard stacked above current image/layer
# P            - Paste below
# q            - Quit (close) current buffer
# Q            - Quit (close) all buffers
# r            - Rotate 90ยบ CW
# R            - Rotate 90ยบ CCW
# s            - Join horizontal (2x1)
# S            - Join vertical (1x2)
# t            - S(T)ACK - cur buffer becomes layer of image underneath
# T
# u            - UNDO
# U
# v
# V
# w
# W
# x
# X
# y [rgbay]    - Yank (copy) R, G, B, A, or Y=all channels to clipboard.
# Y
# z            - ZOOM IN  (scale * 2)
# Z            - ZOOM OUT (scale / 2)
# :bg <color>
# :fg <color>
# :join W H
# :swap [argb][argb01]
#
# <color>
#   [V|RGB|ARGB|RRGGBB|AARRGGBB|transparent|black|white|...]
#================================================================================

$define VERSION "0.1"
$define DATE    "February 19, 2023"

$requireRogue "2.12"

module Vimage

uses Console/CommandLineParser
uses Bitmap
uses Bitmap/IO
uses Epilog
uses UI

$include VMGCmd
$include VMGCmdLineHandler
$include VMGImage
$include VMGImageList
$include VMGImageView
$include VMGKeyHandler
$include VMGState
$include VMGStatusBar
$include VMGTitleBar
$include VimageUI

#nativeHeader @|#include "../Source/ObjC-Interface.h"

try
  #native @|ObjC_check_file( "Test.txt" );
  Vimage.init( System.command_line_arguments )
catch (error:Error)
  Console.error.println error
  System.exit 1
endTry

class Vimage [singleton]
  PROPERTIES
    cmd          : VMGCmd
    repeat_count : Int32?
    anchor       = Anchor.CENTER
    bg_color     = Color.BLACK : Color
    clipboard    : VMGImage
    undo_stack   = @[]

  METHODS
    method init( args:String[] )
      local command = parse_args( args )

      #trace command
      # has //options and possibly //args

      if (command//options//help)
        print_usage
        System.exit 0
      endIf

      local filenames = command//args.to_list<<String>>
      filenames.sort( (a,b)=>a.compare_to(b,&ignore_case) < 0 )

      forEach (filepath in filenames)
        VMGImageList.add( VMGImage(File(filepath)) )
      endForEach

      if (VMGImageList.count)
        VMGImageList.select( VMGImageList.first_child->(as VMGImageListItem) )
      endIf

      VimageUI.run

    method execute( cmd )
      save_undo
      cmd.update_status
      if (repeat_count)
        loop (repeat_count.value) cmd.execute
        repeat_count = null
      else
        cmd.execute
      endIf

    method parse_args( args:String[] )->Value
      local command = CommandLineParser().
      [
        #option( "--flag",     &alias="-f" )
        option( "--help",     &aliases=["-h","-?"] )
        #option( "--setting=", &alias="-s" )
      ].parse( args )
      return command

    method print_usage
      println "Vimage v$"(VERSION)
      println "$"(DATE)
      println

      println @|USAGE
               |  vimage [OPTIONS]
               |
               |OPTIONS
               |  --help, -h, -?
               |    Show this help text.

    method repeat_count_string->String
      if (repeat_count) return repeat_count.value + ""
      else              return ""

    method save_undo
      local state  = VMGImageList->Value
      undo_stack.add( state )

    method undo
      if (undo_stack.is_empty) return
      VMGImageList.unpack( undo_stack.remove_last )

endClass
