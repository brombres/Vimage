class VMGState
  DEFINITIONS
    SHIFT   = (1:<<:16)
    CONTROL = (2:<<:16)
    ALT     = (4:<<:16)
    OS      = (8:<<:16)

  GLOBAL PROPERTIES
    current = VMGState()

  PROPERTIES
    key_handlers = [Int32:VMGKeyHandler]

  METHODS
    method change_state( new_state:VMGState )
      on_leave
      current = new_state
      current.on_enter

    method on( e:KeyEvent )
      if (e.is_press)
        if local handler = key_handlers[ (e.modifier_key_state:<<:16) | e.keycode ]
          handler.on( e )
          return
        endIf
      endIf

    method on_enter
      noAction

    method on_leave
      noAction

    method set_state( new_state:VMGState )
      current.change_state( new_state )

    method set_status( text:String, &dim )
      use builder = VMGStatusBar
        if (dim) builder.style.dim
        builder.print text
        if (dim) builder.style.dim_off
      endUse
endClass

class IdleState : VMGState
  METHODS
    method init
      key_handlers[Keycode.SEMICOLON+SHIFT] = KeyHandlerColon
      key_handlers[Keycode.Q] = KeyHandlerQBuffer
      key_handlers[Keycode.J] = KeyHandlerJBuffer
      key_handlers[Keycode.K] = KeyHandlerKBuffer

endClass

class EnterCmdState : VMGState
  METHODS
    method find_commands( keyword:String )->VMGCmdHandler[]
      local cmds = VMGCmdHandler[]
      forEach (cmd in VMGUI.cmd_handlers)
        if (cmd.keyword == keyword) cmds.add( cmd )
      endForEach
      if (cmds.is_empty)
        forEach (cmd in VMGUI.cmd_handlers)
          if (cmd.keyword.begins_with(keyword)) cmds.add( cmd )
        endForEach
      endIf
      return cmds

    method on( e:KeyEvent )
      if (e.is_press)
        if (e.is_press(Keycode.ESCAPE))
          state = IdleState()
          set_status( "[Cancelled]", &dim )
        elseIf (e.unicode >= 33 and e.unicode != 127)
          VMGUI.command.print e.unicode
          update_status( VMGUI.command )
        elseIf (e.keycode == Keycode.BACKSPACE or e.keycode == Keycode.DELETE)
          if (VMGUI.command.count)
            VMGUI.command.remove_last
            update_status( VMGUI.command )
          endIf
        elseIf (e.keycode == Keycode.SPACE or e.keycode == Keycode.ENTER)
          local cmds = find_commands( VMGUI.command.before_first(' ') )
          which (cmds.count)
            case 0
              if (e.keycode == Keycode.SPACE)
                VMGUI.command.print ' '
              else
                state = IdleState()
                set_status( "[Invalid command]" )
              endIf

            case 1
              local keyword = VMGUI.command.before_first(' ')
              local args = VMGUI.command.after_first( ' ' )

              if (keyword == cmds.first.keyword)
                VMGUI.command.print ' '
              else
                VMGUI.command.clear
                VMGUI.command.print cmds.first.keyword
                VMGUI.command.print ' '
                VMGUI.command.print args
                update_status( VMGUI.command )
              endIf

              if (e.keycode == Keycode.ENTER)
                state = IdleState()
                cmds.first.execute( args )
              endIf
            others
              noAction
          endWhich
        endIf
      endIf

    method update_status( cmd_line:String )
      use builder = VMGStatusBar
        builder.print ':'

        local keyword = cmd_line.before_first(' ')
        local args = cmd_line.after_first(' ')
        local cmds = find_commands( keyword )

        which (cmds.count)
          case 0
            if (cmd_line.trimmed.count > 0)
              builder.print keyword
              if (args.count)
                builder.print ' '
                builder.print args
              endIf
              builder.print ' '
              builder.style.dim
              builder.print " [invalid command]"
              builder.style.dim_off
            endIf

          case 1
            local cmd = cmds.first
            builder.print keyword
            builder.style.dim
            builder.print cmd.keyword[ forEach in keyword.count..<cmd.keyword.count ]
            builder.style.dim_off

            if (args.count)
              builder.print ' '
              builder.print args
            endIf

            if (cmd.syntax and cmd.syntax.count)
              builder.print ' '
              builder.style.dim
              builder.print cmd.syntax
              builder.style.dim_off
            endIf

          others
            builder.print keyword
            builder.print ' '
            builder.style.dim
            builder.print '['
            forEach (cmd at i in cmds)
              if (i > 0) builder.print '|'
              builder.print cmd.keyword
            endForEach
            builder.print ']'
            builder.style.dim_off
        endWhich

      endUse
endClass
