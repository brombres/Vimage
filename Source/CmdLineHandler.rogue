library Vimage
uses Geometry

class CmdLineHandler
  PROPERTIES
    keyword   : String
    alternate : String
    syntax    : String

  METHODS
    method execute( args:String )
      set_status( "[Unimplemented command: $]"(keyword.appending(args)) )

    method execute( cmd:Cmd )
      Vimage.execute( cmd )


    method keyword->String
      return @keyword

    method on_tab
      noAction

    method adjust_percentages( args:String[] )
      forEach (arg in writer=args.rewriter)
        if (arg.ends_with('%')) arg = "$"(arg.unright(1)->Real / 100.0)
        writer.write( arg )
      endForEach

    method parse_anchor( args:String )->Anchor?
      if (args == "") return Vimage.anchor

      if (args.count == 2) args = "$ $"(args[0],args[1])

      local x = 0.5
      local y = 0.5
      forEach (word in args.split(' '))
        which (word)
          case "top","t":    y = 0.0
          case "bottom","b": y = 1.0
          case "left","l":   x = 0.0
          case "right","r":  x = 1.0
          case "center","c": noAction
          others
            status = "anchor [invalid anchor specifier '$']"(word)
            return null
        endWhich
      endForEach

      return Anchor(XY(x,y))

    method parse_color( arg:String, default_alpha=255:Int )->ColorValue?
      local result : Color?

      contingent
        forEach (ch in arg)
          necessary (ch.is_number(16))
        endForEach

        which (arg.count)
          case 0
            set_status( "$ [missing color specification]"(keyword) )
            return null
          case 1
            # V -> 0xVVVVVVVV
            local v = arg->Int( &base=16 )
            v |= v:<<:4
            result = Color( v, v, v, v )
          case 2  # Vv       -> 0xFFVvVvVv
            local v = arg->Int( &base=16 )
            result = Color( v, v, v, default_alpha )
          case 3  # RGB      -> 0xFFRRGGBB
            local r = arg[0].to_number( &base=16 )
            local g = arg[1].to_number( &base=16 )
            local b = arg[2].to_number( &base=16 )
            r |= r:<<:4
            g |= g:<<:4
            b |= b:<<:4
            result = Color( r, g, b, default_alpha )
          case 4  # ARGB     -> 0xAARRGGBB
            local a = arg[0].to_number( &base=16 )
            local r = arg[1].to_number( &base=16 )
            local g = arg[2].to_number( &base=16 )
            local b = arg[3].to_number( &base=16 )
            a |= a:<<:4
            r |= r:<<:4
            g |= g:<<:4
            b |= b:<<:4
            result = Color( r, g, b, a )
          case 6  # RRGGBB   -> 0xFFRRGGBB
            local r = arg.substring(0,2)->Int( &base=16 )
            local g = arg.substring(2,2)->Int( &base=16 )
            local b = arg.substring(4,2)->Int( &base=16 )
            result = Color( r, g, b, default_alpha )
          case 8  # AARRGGBB -> 0xAARRGGBB
            local a = arg.substring(0,2)->Int( &base=16 )
            local r = arg.substring(2,2)->Int( &base=16 )
            local g = arg.substring(4,2)->Int( &base=16 )
            local b = arg.substring(6,2)->Int( &base=16 )
            result = Color( r, g, b, a )
        endWhich

        if (result) return ColorValue( result.value )

      unsatisfied
        arg .= replacing(' ','_').replacing('-','_')
        which (arg)
          case "black":       result = Color( 0xff000000 )
          case "blue":        result = Color( 0xff0000FF )
          case "brown":       result = Color( 0xff882222 )
          case "cyan":        result = Color( 0xff00FFFF )
          case "dark_gray":   result = Color( 0xff444444 )
          case "dark_green":  result = Color( 0xff008800 )
          case "gray":        result = Color( 0xff888888 )
          case "green":       result = Color( 0xff00FF00 )
          case "light_gray":  result = Color( 0xffCCCCCC )
          case "light_green": result = Color( 0xff88FF88 )
          case "magenta":     result = Color( 0xffFF00FF )
          case "orange":      result = Color( 0xffFF8800 )
          case "pink":        result = Color( 0xffFFCCCC )
          case "purple":      result = Color( 0xff880088 )
          case "red":         result = Color( 0xffFF0000 )
          case "rogue_blue":  result = Color( 0xff3333FF )
          case "royal_blue":  result = Color( 0xff4169E1 )
          case "sky_blue":    result = Color( 0xff87CEEB )
          case "t":           return ColorValue( Color(0) )
          case "transparent": return ColorValue( Color(0) )
          case "clear":       return ColorValue( Color(0) )
          case "yellow":      result = Color( 0xffFFFF00 )
          case "white":       result = Color( 0xffFFFFFF )
          case "random":      return ColorValue( Color.BLACK, &is_random )
        endWhich
      endContingent

      if (result) return ColorValue( result.value.with_alpha(default_alpha) )

      set_status( "[Syntax error: invalid color '$']"(arg) )
      return null

    method parse_ratio( arg:String )->XY?
      local pair = arg.split(':')
      if (pair.count == 2)
        local x = pair.first->Int
        local y = pair.last->Int
        if (x->String == pair.first and y->String == pair.last)
          return XY(x,y)
        else
          set_status( "$ [invalid aspect ratio '$']"(keyword,arg) )
          return null
        endIf
      else
        set_status( "$ [missing or invalid aspect ratio specification]"(keyword) )
        return null
      endIf

    method parse_size( arg:String, &either_or, &tile_size )->Size?
      if (arg.contains('.')) return null # contains a scale, not a size

      local pair = arg.split('x')
      if (pair.count == 2)
        contingent
          use args = WorkList<<Variant>>
            local found_empty = false
            forEach (value in pair)
              if (value.is_integer)
                args.add( value )
              elseIf ((value.equals("o",&ignore_case) or value.equals("over",&ignore_case)) and not tile_size)
                args.add( "o" )
              elseIf ((value.equals("u",&ignore_case) or value.equals("under",&ignore_case)) and not tile_size)
                args.add( "u" )
              elseIf (value == "" and either_or)
                if (found_empty) return null  # both can't be empty
                args.add( undefined )
                found_empty = true
              else
                escapeContingent
              endIf
            endForEach

            return Size( args[0], args[1] )
          endUse
        endContingent
      endIf

      set_status( "$ [missing or invalid size specification '$']"(keyword,arg) )
      return null

    method parse_scale_either_or( arg:String )->(width:Real?,height:Real?)
      local pair = arg.split('x')
      if (pair.count == 1)
        local scale = pair.first->Real
        return (width:scale,height:scale)
      elseIf (pair.count == 2)
        contingent
          necessary (pair.first != "" or pair.last != "")

          if (pair.first == "")
            return (width:null,height:pair.last->Real)
          else
            if (pair.last == "") return (width:pair.first->Real,height:null)
            else                 return (width:pair.first->Real,height:pair.last->Real)
          endIf
        endContingent
      endIf

      set_status( "$ [missing or invalid size specification '$']"(keyword,arg) )
      return (width:null,height:null)

    method set_state( new_state:State )
      State.current.change_state( new_state )

    method set_status( text:String, &dim )
      use builder = StatusBar
        if (dim) builder.style.dim
        builder.print text
        if (dim) builder.style.dim_off
      endUse

    method syntax->String
      return @syntax

    method syntax( args:String )->String
      return syntax
endClass

class CmdLineFilepathHandler : CmdLineHandler
  PROPERTIES
    cur_tab_base   : String
    cur_tab_arg    : String
    cur_tab_count  : Int

  METHODS
    method on_tab
      local img_file : File?
      if (ImageList.selected)
        if local image_file = ImageList.selected.image.file
          img_file = image_file
        endIf
      endIf

      local args = Scanner( VimageUI.command ).scan_args
      if (args.count >= 2)
        local arg = args.remove_last.unescaped
        contingent
          necessary  (cur_tab_base)
          sufficient (arg != cur_tab_arg)
          sufficient (File(arg).contains_wildcards)
          necessary (not File(cur_tab_base).listing.contains(arg))
          escapeContingent
        satisfied
          cur_tab_base = null
        endContingent

        if (not cur_tab_base)
          if (arg.contains(".."))
            if (img_file) arg = img_file.value.folder / arg
            arg = File(arg).filepath
          endIf
          cur_tab_base = arg
          cur_tab_count = 0
        endIf

        local listing = File(cur_tab_base.with_suffix("*")).listing(&ignore_hidden)
        if (listing.count == 0)
          if (img_file)
            cur_tab_base = img_file.value.parent / cur_tab_base
            listing = File(cur_tab_base.with_suffix("*")).listing(&ignore_hidden)
          endIf
        endIf

        if (listing.count >= 1)
          cur_tab_count %= listing.count
          local file = File( listing[cur_tab_count] )
          if (listing.count == 1 and file.is_folder)
            cur_tab_base = file.filepath + "/"
            local result_file = File(cur_tab_base)
            if (img_file) result_file .= relative_to( img_file.value.parent )
            cur_tab_arg = result_file.filepath
            args.add( result_file.esc )
          else
            local result_file = File(file.filepath)
            if (img_file) result_file .= relative_to( img_file.value.parent )
            cur_tab_arg = result_file.filepath
            args.add( result_file.esc )
          endIf
          ++cur_tab_count
        else
          cur_tab_arg = arg
          args.add( File(arg).esc )
        endIf

      else
        local folder = File(".")

        if (ImageList.selected)
          if local cur_file = ImageList.selected.image.file
            folder = cur_file.parent
            local abs_cwd = File(".").abs
            if (folder.filepath == abs_cwd)
              folder = File("*")
            else
              abs_cwd += "/"
              if (folder.filepath.begins_with(abs_cwd))
                folder = File( folder.filepath.after_first(abs_cwd) )
              endIf
            endIf
          endIf
        endIf

        if (folder.filepath == "*")
          cur_tab_base = "*"
        else
          cur_tab_base  = folder.filepath + "/*"
        endIf
        cur_tab_count = 0
        local listing = folder.listing(&ignore_hidden)
        if (listing.count)
          cur_tab_count %= folder.listing.count

          local result_file = File(listing[cur_tab_count])
          if (img_file) result_file .= relative_to( img_file.value.parent )
          cur_tab_arg = result_file.filepath
          args.add( result_file.esc )

          ++cur_tab_count
          if (listing.count == 1)
            cur_tab_base = listing[0]
            cur_tab_count = 0
          endIf
        endIf
      endIf

      VimageUI.command.[clear].print( args.join(' ') )

endClass

class CmdLineAnchor : CmdLineHandler [singleton]
  PROPERTIES
    keyword = "anchor"
    syntax = "[center|top|bottom|left|right|c|t|b|l|r]+"

  METHODS
    method execute( args:String )
      if local anchor = parse_anchor( args )
        Vimage.anchor = anchor

        use status = StatusBar
          status.print "anchor"
          if (Vimage.anchor.position == XY(0.5,0.5))
            status.print " center"
          else
            which (Vimage.anchor.position.y)
              case 0.0: status.print " top"
              case 1.0: status.print " bottom"
            endWhich
            which (Vimage.anchor.position.x)
              case 0.0: status.print " left"
              case 1.0: status.print " right"
            endWhich
          endIf
        endUse
      endIf
endClass

class CmdLineAspect : CmdLineHandler [singleton]
  PROPERTIES
    keyword = "aspect"

  METHODS
    method execute( args:String )
      if local size = parse_ratio( args )
        execute( CmdAspect(size) )
      else
        status = "aspect [missing or invalid size specification]"
      endIf

    method syntax->String
      if (not ImageList.selected) return "W:H"
      local bitmap = ImageList.selected.image.bitmap
      local w = bitmap.width
      local h = bitmap.height

      local result = String()
      result.print "[W:H|"
      result.print w
      result.print ':'
      result.print h
      local min_w = w
      local min_h = h
      while (min_w % 2 == 0 and min_h % 2 == 0)
        min_w /= 2
        min_h /= 2
      endWhile

      local repeat = true
      while (repeat)
        repeat = false
        forEach (d in 3..min_w.sqrt)
          if (min_w % d == 0 and min_h % d == 0)
            min_w /= d
            min_h /= d
            repeat = true
            escapeForEach
          endIf
        endForEach
      endWhile

      if (min_w != w)
        result.print '|'
        result.print min_w
        result.print ':'
        result.print min_h
      endIf
      result.print ']'
      return result

endClass

class CmdLineBG : CmdLineHandler [singleton]
  PROPERTIES
    keyword = "bg"
    syntax  = "[V|RGB|ARGB|RRGGBB|AARRGGBB|transparent|t|0|red|yellow|...|random]"

  METHODS
    method execute( args:String )
      if local color = parse_color( args )
        execute( CmdSetBGColor(color) )
      endIf
endClass

class CmdLineClamp : CmdLineHandler [singleton]
  PROPERTIES
    keyword = "clamp"
    syntax  = "LOW HIGH (RGB/ARGB values)"

  METHODS
    method execute( args:String )
      block args = args.split(' ')
        if (args.count == 2)
          local lo = parse_color( args.first, 0 )
          local hi = parse_color( args.last, 255 )
          if (not lo or not hi) return
          execute( CmdClamp(lo.value,hi.value) )
        else
          status = "clamp [expected 'LOW HIGH' RGB/ARGB values]"
        endIf
      endBlock
endClass

class CmdLineClampL : CmdLineHandler [singleton]
  PROPERTIES
    keyword = "clampl"
    syntax  = "LOW HIGH (RGB/ARGB value)"

  METHODS
    method execute( args:String )
      block args = args.split(' ')
        if (args.count == 1)
          local lo = parse_color( args.first, 0 )
          if (not lo) return
          execute( CmdClamp(lo.value,Color(-1)) )
        else
          status = "clampl [expected 'LOW' RGB/ARGB value]"
        endIf
      endBlock
endClass

class CmdLineClampH : CmdLineHandler [singleton]
  PROPERTIES
    keyword = "clamph"
    syntax  = "HIGH (RGB/ARGB value)"

  METHODS
    method execute( args:String )
      block args = args.split(' ')
        if (args.count == 1)
          local hi = parse_color( args.first, 255 )
          if (not hi) return
          execute( CmdClamp(Color(0),hi.value) )
        else
          status = "clamph [expected 'HIGH' RGB/ARGB value]"
        endIf
      endBlock
endClass

class CmdLineCrop : CmdLineHandler [singleton]
  PROPERTIES
    keyword = "crop"
    syntax  = "[[WxH|Wx|xH|N] [center|top|left|bottom|right|c|t|l|b|r]] [LEFT|TOP|RIGHT|BOTTOM|SCALE]"

  METHODS
    method execute( arg_string:String )
      local args = arg_string.split(' ')
      if (args.count == 4)
        execute( CmdCrop(args[0],args[1],args[2],args[3]) )
      elseIf (args.count == 1 and not args[0].contains('x'))
        local n = args[0]->Int
        execute( CmdCrop(n,n,n,n) )
      elseIf (args.count == 2 and args[0].is_number and not args[0].contains('x'))
        local n = args[0]->Int
        local anchor = parse_anchor( args.cloned.[remove_first].join(' ') )
        if (not anchor) anchor = Anchor.CENTER
        if (anchor.value == Anchor.CENTER)
          execute( CmdCrop(n,n,n,n) )
        else
          local top    = 0
          local left   = 0
          local bottom = 0
          local right  = 0
          if (anchor.value.position.x == Anchor.LEFT.position.x)   left = n
          if (anchor.value.position.x == Anchor.RIGHT.position.x)  right = n
          if (anchor.value.position.y == Anchor.TOP.position.y)    top = n
          if (anchor.value.position.y == Anchor.BOTTOM.position.y) bottom = n
          execute( CmdCrop(left,top,right,bottom) )
        endIf
      else
        local anchor : Anchor?
        if (args.count > 1)
          anchor = parse_anchor( args.cloned.[remove_first].join(' ') )
        endIf

        if local size = parse_size( args[0], &either_or )
          execute( CmdCropToSize(size,anchor) )
        else
          local (sx,sy) = parse_scale_either_or( arg_string )
          if (sx or sy)
            execute( CmdCropToScale(sx,sy,anchor) )
          else
            status = "crop [missing or invalid size specification]"
          endIf
        endIf
      endIf

endClass

class CmdLineAspectFill : CmdLineHandler [singleton]
  PROPERTIES
    keyword = "aspect-fill"
    syntax  = "[WxH|Wx|xH|SCALE]"

  METHODS
    method execute( args:String )
      if local size = parse_size( args, &either_or )
        execute( CmdAspectFillToSize(size) )
      else
        local (sx,sy) = parse_scale_either_or( args )
        if (sx or sy)
          execute( CmdAspectFillToScale(sx,sy) )
        else
          status = "aspect-fill [missing or invalid size specification]"
        endIf
      endIf
endClass

class CmdLineChannel : CmdLineHandler [singleton]
  PROPERTIES
    keyword = "channel"
    syntax  = "[copy|hsvtorgb|rgbtohsv|swap]"

  METHODS
    method execute( arg_string:String )
      local cmd : Cmd

      local args = arg_string.split(' ')
      local op_name = args.remove_first
      which (op_name)
        case "copy":
          if (args.count == 2)
            local a = parse_copy_channels( args.first )
            local b = parse_copy_channels( args.last, &allow_multiple )
            if (not a or not b) return
            cmd = CmdChannelCopy(a,b)
          else
            status = "channel copy [expected <source-channel> <destination-channels>]"
            return
          endIf
        case "hsvtorgb": cmd = CmdChannelHSVToRGB( args )
        case "rgbtohsv": cmd = CmdChannelRGBToHSV( args )
        case "swap":
          if (args.count == 2)
            local a = parse_swap_channel( args.first )
            local b = parse_swap_channel( args.last )
            if (not a or not b) return
            cmd = CmdChannelSwap(a.value,b.value)
          else
            status = "channel swap [expected <source-channel> <destination-channel>]"
            return
          endIf
      endWhich

      if (cmd)
        execute( cmd )
      else
        status = "channel [missing or invalid channel operation]"
      endIf

    method parse_copy_channels( args:String, &allow_multiple )->String
      if (allow_multiple)
        local channels = 0L
        forEach (ch in args)
          if (not "bgra".locate(ch))
            status = ''channel copy [illegal destination channel specification '$']''(ch)
            return null
          endIf
        endForEach
      elseIf (args.count == 1)
        if (args == "0") return args
        if (not "bgra".locate(args) and not args[0].is_number(&base=16))
          status = ''channel copy [illegal source channel or value specification '$']''(args[0])
          return null
        endIf
      else
        if (args->Int(&base=16)->String(&hex).rightmost(2).to_uppercase != args.to_uppercase)
          status = ''channel copy [illegal source channel or value specification '$']''(args)
          return null
        endIf
      endIf

      return args

    method parse_swap_channel( arg:String )->Int?
      # Returns a channel index. Each value:
      #   b -> 0
      #   g -> 1
      #   r -> 2
      #   a -> 3
      if (arg.count == 1)
        local index = "bgra".locate( arg )
        if (index) return index.value
      endIf
      status = ''channel swap [illegal channel specification '$']''(arg)
      return null

    method syntax( arg_string:String )->String
      if (not arg_string.count) return @syntax
      local args = arg_string.split(' ')
      which (args.first)
        case "copy": return "source-channel:[a|r|g|b|XX] destination-channel:[a|r|g|b]+"
        case "swap": return "source-channel:[a|r|g|b] destination-channel:[a|r|g|b]"
        others: return @syntax
      endWhich

endClass

class CmdLineFilter : CmdLineHandler [singleton]
  PROPERTIES
    keyword = "filter"
    syntax  = "[brightgold|clamp|gold|gray|hardalpha|matchbright|matchcolor|normalize|seamless]"

  METHODS
    method execute( arg_string:String )
      local filter : Cmd

      local args = arg_string.split(' ')
      local filter_name = args.remove_first
      which (filter_name)
        case "clamp":
          if (args.count != 2)
            status = "filter clamp [two color arguments required]"
            return
          endIf
          local low = parse_color( args[0] )
          local high = parse_color( args[1] )
          if (not low or not high)
            status = "filter clamp [invalid color argument]"
            return
          endIf
          filter = CmdFilterClamp( low.value, high.value )
        case "brightgold":   filter = CmdFilterBrightGold( args )
        case "gold":         filter = CmdFilterGold( args )
        case "gray", "grey": filter = CmdFilterGray( args )
        case "hardalpha":    filter = CmdFilterHardAlpha( args )
        case "matchbright":  filter = CmdFilterMatchBright( args )
        case "matchcolor":   filter = CmdFilterMatchColor( args )
        case "normalize"
          which (args.count)
            case 0
              filter = CmdFilterNormalize(0,255)
            case 2
              filter = CmdFilterNormalize(args[0]->Int,args[1]->Int)
            others
              status = "filter normalize [expected no arguments or two arguments]"
              return
          endWhich
        case "seamless"
          local amount = 1.0
          local h = args.remove( "h" )
          local v = args.remove( "v" )
          if (args.remove("hv") or args.remove("vh"))
            h = true
            v = true
          endIf

          if (args.count == 1)
            if (args.first.ends_with('%'))
              amount = args.first->Real / 100.0
            else
              amount = args.first->Int + 1
            endIf
          endIf
          filter = CmdFilterSeamless( &blend=amount, &=h, &=v )
      endWhich

      if (filter)
        execute( filter )
      else
        status = "filter [missing or invalid filter name]"
      endIf

    method syntax( arg_string:String )->String
      if (not arg_string.count) return @syntax
      local args = arg_string.split(' ')
      which (args.first)
        case "clamp": return "<low-color> <high-color>"
        case "gray","grey": return "[red-weight green-weight blue-weight] (defaults: 299 587 114)"
        case "normalize":   return "[low high] (defaults: 0 255)"
        case "seamless":    return "[h|v] [<percent>% | <pixels>] (default: 100%)"
        others: return @syntax
      endWhich

endClass

class CmdLineGenerate : CmdLineHandler [singleton]
  PROPERTIES
    keyword = "generate"
    syntax  = "[mosaic|parts|perlin]"

  METHODS
    method execute( arg_string:String )
      local cmd : Cmd

      local args = arg_string.split(' ')
      local filter_name = args.remove_first
      which (filter_name)
        case "mosaic"
          if (args.count == 2)
            if local source_tile_count = parse_size( args[0], &tile_size )
              if local output_tile_count = parse_size( args[1], &tile_size )
                cmd = CmdGenerateMosaic( source_tile_count->XY, output_tile_count->XY )
              endIf
            endIf
          endIf
          if (not cmd)
            status = "generate mosaic [missing or invalid arguments]"
          endIf

        case "parts"
          cmd = CmdGenerateParts

        case "perlin"
          local freq = 8.0
          if (args.count)
            if (args.first.is_number)
              freq = args.first->Real
            else
              status = "generate perlin <frequency> [frequency must be a number, e.g. 8.0]"
              return
            endIf
          endIf
          cmd = CmdGeneratePerlin( freq )
      endWhich

      if (cmd)
        execute( cmd )
      else
        status = "generate [missing or invalid generator name]"
      endIf

    method syntax( arg_string:String )->String
      if (not arg_string.count) return @syntax
      local args = arg_string.split(' ')
      which (args.first)
        case "mosaic": return "W1xH1 W2xH2 (current image tile size, output tile size)"
        case "parts":  return "(transparency-separated parts into separate images)"
        case "perlin": return "[frequency] (default:8.0)"
        others: return @syntax
      endWhich

endClass

class CmdLineAspectFit : CmdLineHandler [singleton]
  PROPERTIES
    keyword = "aspect-fit"
    syntax  = "[WxH|Wx|xH|SCALE]"

  METHODS
    method execute( args:String )
      if local size = parse_size( args, &either_or )
        execute( CmdAspectFitToSize(size) )
      else
        local (sx,sy) = parse_scale_either_or( args )
        if (sx or sy)
          execute( CmdAspectFitToScale(sx,sy) )
        else
          status = "aspect-fit [missing or invalid size specification]"
        endIf
      endIf
endClass

class CmdLineExtract : CmdLineHandler [singleton]
  PROPERTIES
    keyword = "extract"
    syntax  = "[1-4 channel thresholds e.g. 'a == 255, g <= 128, b > 64']"

  METHODS
    method execute( arg_line:String )
      if (arg_line == "")
        status = "extract [no channel thresholds given]"
        return
      endIf

      local min = Dim<<Int>>(4)
      local max = Dim<<Int>>(4).[ fill(255) ]
      local args = arg_line.split(',')
      forEach (arg in args)
        contingent
          sufficient (.apply(arg,"==",min,max))
          sufficient (.apply(arg,"<=",min,max))
          sufficient (.apply(arg,"<",min,max))
          sufficient (.apply(arg,">=",min,max))
          sufficient (.apply(arg,">",min,max))
          sufficient (.apply(arg,"=",min,max))
          necessary (false)
        unsatisfied
          status = "extract [invalid argument '$']"(arg)
          return
        endContingent
      endForEach

      execute( CmdExtract(min,max) )

    method .apply( expression:String, op:String, min:Int[], max:Int[] )->Logical
      expression .= trimmed
      if local args = expression.extract_strings( "$" + op + "$" )
        if local i = "argb".locate( args[0] )
          if (args[1].is_integer)
            local n = args[1]->Int
            which (op)
              case "==", "=": min[i] = n; max[i] = n
              case "<=": max[i] = n
              case "<":  max[i] = n - 1
              case ">=": min[i] = n
              case ">":  min[i] = n + 1
            endWhich
            return true
          endIf
        endIf
      endIf

      return false


endClass

class CmdLineFill : CmdLineHandler [singleton]
  PROPERTIES
    keyword = "fill"
    syntax  = "[COLOR | TOP BOTTOM | TL TR BL BR | COLORS ]"

  METHODS
    method execute( arg_line:String )
      if (arg_line == "")
        execute( CmdFill(Vimage.bg_color) )
        return
      endIf

      local args = arg_line.split(' ')
      which (args.count)
        case 1
          if local c = parse_color( args[0] )
            execute( CmdFill(c) )
          endIf
        case 2
          if local a = parse_color( args[0] )
            if local b = parse_color( args[1] )
              execute( CmdFill2(a,b) )
            endIf
          endIf
        case 4
          if local a = parse_color( args[0] )
            if local b = parse_color( args[1] )
              if local c = parse_color( args[2] )
                if local d = parse_color( args[3] )
                  execute( CmdFill4(a,b,c,d) )
                endIf
              endIf
            endIf
          endIf
        others
          # 3 or 5+ colors makes a gradient from L-R
          local colors = ColorValue[]
          forEach (arg in args)
            if local c = parse_color( arg )
              colors.add( c )
            else
              return
            endIf
          endForEach
          execute( CmdFillGradient(colors) )
      endWhich

endClass

class CmdLineFillAlpha : CmdLineHandler [singleton]
  PROPERTIES
    keyword = "fillalpha"
    syntax  = "[COLOR | TOP BOTTOM | TL TR BL BR | COLORS ]"

  METHODS
    method execute( arg_line:String )
      if (arg_line == "")
        execute( CmdFillAlpha(Vimage.bg_color) )
        return
      endIf

      local args = arg_line.split(' ')
      which (args.count)
        case 1
          if local c = parse_color( args[0] )
            execute( CmdFillAlpha(c) )
          endIf
        case 2
          if local a = parse_color( args[0] )
            if local b = parse_color( args[1] )
              execute( CmdFillAlpha2(a,b) )
            endIf
          endIf
        case 4
          if local a = parse_color( args[0] )
            if local b = parse_color( args[1] )
              if local c = parse_color( args[2] )
                if local d = parse_color( args[3] )
                  execute( CmdFillAlpha4(a,b,c,d) )
                endIf
              endIf
            endIf
          endIf
        others
          # 3 or 5+ colors makes a gradient from L-R
          local colors = ColorValue[]
          forEach (arg in args)
            if local c = parse_color( arg )
              colors.add( c )
            else
              return
            endIf
          endForEach
          execute( CmdFillAlphaGradient(colors) )
      endWhich

endClass

class CmdLineFillRGB : CmdLineHandler [singleton]
  PROPERTIES
    keyword = "fillrgb"
    syntax  = "[COLOR | TOP BOTTOM | TL TR BL BR | COLORS ]"

  METHODS
    method execute( arg_line:String )
      if (arg_line == "")
        execute( CmdFillRGB(Vimage.bg_color) )
        return
      endIf

      local args = arg_line.split(' ')
      which (args.count)
        case 1
          if local c = parse_color( args[0] )
            execute( CmdFillRGB(c) )
          endIf
        case 2
          if local a = parse_color( args[0] )
            if local b = parse_color( args[1] )
              execute( CmdFillRGB2(a,b) )
            endIf
          endIf
        case 4
          if local a = parse_color( args[0] )
            if local b = parse_color( args[1] )
              if local c = parse_color( args[2] )
                if local d = parse_color( args[3] )
                  execute( CmdFillRGB4(a,b,c,d) )
                endIf
              endIf
            endIf
          endIf
        others
          # 3 or 5+ colors makes a gradient from L-R
          local colors = ColorValue[]
          forEach (arg in args)
            if local c = parse_color( arg )
              colors.add( c )
            else
              return
            endIf
          endForEach
          execute( CmdFillRGBGradient(colors) )
      endWhich

endClass

class CmdLineHardAlpha : CmdLineHandler [singleton]
  PROPERTIES
    keyword = "ha"

  METHODS
    method execute( args:String )
      Vimage.hard_alpha = not Vimage.hard_alpha

      if (Vimage.hard_alpha) status = "[hard alpha on]"
      else                   status = "[hard alpha off]"

      if (ImageList.selected)
        ImageList.selected.image.cached_text_canvas = null
        ImageView.mark_modified
      endIf

    method syntax->String
      if (Vimage.hard_alpha) return "(turn hard alpha off)"
      else                   return "(turn hard alpha on)"

endClass

class CmdLineInfo : CmdLineHandler [singleton]
  PROPERTIES
    keyword = "info"
    syntax  = "[range]"

  METHODS
    method execute( arg_string:String )
      local cmd : Cmd

      local args = arg_string.split(' ')
      local info_name = args.remove_first
      which (info_name)
        case "range":
          cmd = CmdInfoRange
      endWhich

      if (cmd)
        execute( cmd )
      else
        status = "info [missing or invalid info type name]"
      endIf

    method syntax( arg_string:String )->String
      if (not arg_string.count) return @syntax
      local args = arg_string.split(' ')
      which (args.first)
        others: return @syntax
      endWhich

endClass


class CmdLineJoin : CmdLineHandler [singleton]
  PROPERTIES
    keyword = "join"
    syntax  = "WxH [(b)lend [<amount>[%]] [(w)rap] | (p)atch]"

  METHODS
    method execute( arg_string:String )
      local args = arg_string.split(' ')
      local patch = false
      local blend = 0.0
      local blend_wrap = false
      if (args.contains("patch"))
        args.remove( "patch" )
        patch = true
      elseIf (args.contains("p"))
        args.remove( "p" )
        patch = true
      endIf
      if (args.contains("blend"))
        args.remove( "blend" )
        blend = 0.25
      elseIf (args.contains("b"))
        args.remove( "b" )
        blend = 0.25
      endIf
      if (args.contains("wrap"))
        args.remove( "wrap" )
        blend_wrap = true
      elseIf (args.contains("w"))
        args.remove( "w" )
        blend_wrap = true
      endIf
      if (blend)
        if (patch)
          status = "join [cannot use 'patch' and 'blend' together]"
          return
        endIf

        if (args.count > 1)
          local amount = args.last.before_first( '%' )
          if (amount != args.last and amount.is_number)
            args.remove_last
            blend = amount->Real / 100.0
          elseIf (amount.is_number)
            args.remove_last
            blend = amount->Int + 1
          endIf
        endIf
      endIf

      if local size = parse_size( args.join(' '), &tile_size )
        execute( CmdJoin(size->XY,&=patch,&=blend,&=blend_wrap) )
      endIf
endClass

class CmdLineLiteralBitwiseAND : CmdLineHandler [singleton]
  PROPERTIES
    keyword = "&"
    syntax  = "[V|RGB|ARGB|RRGGBB|AARRGGBB|transparent|t|0|red|yellow|...]"

  METHODS
    method execute( args:String )
      if local color = parse_color( args )
        execute( CmdLiteralBitwiseAND(color->Color.argb) )
      endIf
endClass

class CmdLineLiteralBitwiseOR : CmdLineHandler [singleton]
  PROPERTIES
    keyword = "|"
    syntax  = "[V|RGB|ARGB|RRGGBB|AARRGGBB|transparent|t|0|red|yellow|...]"

  METHODS
    method execute( args:String )
      if local color = parse_color( args )
        execute( CmdLiteralBitwiseOR(color->Color.argb) )
      endIf
endClass

class CmdLineLiteralBitwiseXOR : CmdLineHandler [singleton]
  PROPERTIES
    keyword = "~"
    syntax  = "[V|RGB|ARGB|RRGGBB|AARRGGBB|transparent|t|0|red|yellow|...]"

  METHODS
    method execute( args:String )
      if local color = parse_color( args )
        execute( CmdLiteralBitwiseXOR(color->Color.argb) )
      endIf
endClass

class CmdLineLiteralBitwiseROL : CmdLineHandler [singleton]
  PROPERTIES
    keyword = "<"
    syntax  = "BIT-COUNT [a] (include 'a' to include alpha channel)"

  METHODS
    method execute( args:String )
      local include_alpha = args.contains('a')
      if (include_alpha) args = args.replacing("a","").trimmed
      local n = args->Int
      if (n->String == args)
        execute( CmdLiteralBitwiseROL(n,&=include_alpha) )
      endIf
endClass

class CmdLineLiteralBitwiseROR : CmdLineHandler [singleton]
  PROPERTIES
    keyword = ">"
    syntax  = "BIT-COUNT [a] (include 'a' to include alpha channel)"

  METHODS
    method execute( args:String )
      local include_alpha = args.contains('a')
      if (include_alpha) args = args.replacing("a","").trimmed
      local n = args->Int
      if (n->String == args)
        execute( CmdLiteralBitwiseROR(n,&=include_alpha) )
      endIf
endClass

class CmdLineLiteralAdd : CmdLineHandler [singleton]
  PROPERTIES
    keyword = "+"
    syntax  = "[V|RGB|ARGB|RRGGBB|AARRGGBB|transparent|t|0|red|yellow|...]"

  METHODS
    method execute( args:String )
      if local color = parse_color( args )
        execute( CmdLiteralAdd(color->Color.argb) )
      endIf
endClass

class CmdLineLiteralMultiply : CmdLineHandler [singleton]
  PROPERTIES
    keyword = "*"
    syntax  = "[V|RGB|ARGB|RRGGBB|AARRGGBB|transparent|t|0|red|yellow|...]"

  METHODS
    method execute( args:String )
      if local color = parse_color( args )
        execute( CmdLiteralMultiply(color->Color.argb) )
      endIf
endClass

class CmdLineName : CmdLineHandler [singleton]
  PROPERTIES
    keyword = "name"
    syntax  = "New image name"

  METHODS
    method execute( arg_string:String )
      local args = Scanner(arg_string).scan_args
      if (args.count == 0)
        status = "name [no new name given]"
      elseIf (args.count > 1)
        status = "name [too many arguments]"
      elseIf (not ImageList.selected)
        status = "name [no current image]"
      else
        execute( CmdName(args.first) )
      endIf

endClass

class CmdLineNew : CmdLineHandler [singleton]
  PROPERTIES
    keyword = "new"

  METHODS
    method execute( args:String )
      if (args.count == 0)
        local size = default_size
        execute( CmdNew(size,&insert=should_insert) )
      else
        if local size = parse_size( args )
          execute( CmdNew(size,&insert=should_insert) )
        endIf
      endIf

    method default_size->Size
      if local selected = ImageList.selected
        if local image = selected.image
          return image.bitmap.size
        endIf
      endIf
      return Size( ImageView.size * XY(1,2) )

    method should_insert->Logical
      return false

    method syntax->String
      if (VimageUI.command.after_first(' ').count?) return "WxH"

      localize default_size
      return "$x$"(default_size.x->Int,default_size.y->Int)
endClass

class CmdLineNEW : CmdLineNew [singleton]
  PROPERTIES
    keyword = "NEW"

  METHODS
    method should_insert->Logical
      return true
endClass

class CmdLineShift : CmdLineHandler [singleton]
  PROPERTIES
    keyword = "shift"
    syntax = "X Y [wrap|w]"

  METHODS
    method execute( args:String )
      local args = args.split(' ')

      local wrap = false
      if (args.count > 0 and (args.last == "wrap" or args.last == "w"))
        wrap = true
        args.remove_last
      endIf

      if (args.count == 2 and args[0].is_number and args[1].is_number)
        execute( CmdShift(args[0]->Int,args[1]->Int,&=wrap) )
      else
        status = "shift [missing or invalid X and Y shift offsets]"
      endIf

endClass

class CmdLineOpen : CmdLineFilepathHandler [singleton]
  PROPERTIES
    keyword = "open"
    syntax  = "[filepath|wildcard/**/*.filepath]"

  METHODS
    method execute( arg_line:String )
      if (arg_line == "") return
      local args = Scanner( arg_line ).scan_args
      execute( CmdOpen(args) )

endClass

class CmdLineQuit : CmdLineHandler [singleton]
  PROPERTIES
    keyword   = "q"
    syntax    = "(quit)"

  METHODS
    method execute( args:String )
      execute( CmdQuit() )

endClass

class CmdLineForceQuit : CmdLineHandler [singleton]
  PROPERTIES
    keyword = "q!"
    syntax  = "(force-quit)"

  METHODS
    method execute( args:String )
      execute( CmdQuit(&force) )

endClass

class CmdLineQuitAll : CmdLineHandler [singleton]
  PROPERTIES
    keyword = "qq"
    syntax  = "(quit all)"

  METHODS
    method execute( args:String )
      execute( CmdQuitAll() )

endClass

class CmdLineForceQuitAll : CmdLineHandler [singleton]
  PROPERTIES
    keyword = "qq!"
    syntax  = "(force-quit all)"

  METHODS
    method execute( args:String )
      execute( CmdQuitAll(&force) )

endClass

class CmdLineSelectIndex( index:Int ) : CmdLineHandler
  METHODS
    method execute( args:String )
      execute( CmdSelectIndex(index) )

    method keyword->String
      return index->String

    method syntax->String
      return "(select image $)"(index)
endClass

class CmdLineSplit : CmdLineHandler [singleton]
  PROPERTIES
    keyword = "split"
    syntax  = "[WxH|X Y|patch|p]"

  METHODS
    method execute( arg_string:String )
      if (arg_string == "patch" or arg_string == "p" or arg_string == "patches")
        execute( CmdSplit(&patch) )
      elseIf (arg_string.contains('x'))
        if local size = parse_size( arg_string, &tile_size )
          execute( CmdSplit(size->XY) )
        endIf
      else
        local args = arg_string.split(' ')
        adjust_percentages( args )
        if (args.count == 2 and args[0].is_number and args[1].is_number)
          execute( CmdSplitXY( args[0]->Real, args[1]->Real ) )
        else
          status = "split [missing or invalid WxH tile count or X and Y pixel offsets]"
        endIf
      endIf
endClass

class CmdLineRemove : CmdLineHandler [singleton]
  PROPERTIES
    keyword = "rm"
    syntax  = "(permanently deletes this image file from its folder)"

  METHODS
    method execute( arg_line:String )
      execute( CmdRemove )

endClass

class CmdLineResize : CmdLineHandler [singleton]
  PROPERTIES
    keyword = "resize"
    syntax  = "[WxH|Wx|xH|SCALE]"

  METHODS
    method execute( args:String )
      if local size = parse_size( args, &either_or )
        execute( CmdResizeToSize(size) )
      else
        local (sx,sy) = parse_scale_either_or( args )
        if (sx or sy)
          execute( CmdResizeToScale(sx,sy) )
        else
          status = "resize [missing or invalid size specification]"
        endIf
      endIf
endClass

class CmdLineTrim : CmdLineHandler [singleton]
  PROPERTIES
    keyword = "trim"
    syntax  = "[t|l|b|r]"

  METHODS
    method execute( args:String )
      block args = args.to_lowercase->Character[]
        args.discard( $ == ' ' )
        local top = args.contains( 't' )
        local left = args.contains( 'l' )
        local bottom = args.contains( 'b' )
        local right = args.contains( 'r' )
        args.discard( "tlbr ".contains($) )
        if (args.is_empty)
          execute( CmdTrim(&=top,&=left,&=bottom,&=right) )
        else
          status = "trim [invalid selector '$'"(args.first)
        endIf
      endBlock

endClass

class CmdLineWrite : CmdLineFilepathHandler [singleton]
  PROPERTIES
    keyword = "w"

  METHODS
    method execute( args:String )
      if (not ImageList.selected)
        status = "w [no current image]"
        return
      endIf

      if (args == "")
        Vimage.execute( CmdWrite )
        return
      endIf

      which (File(args).extension.to_lowercase)
        case "png", "jpg", "jpeg", "tiff", "bmp", "gif"
          noAction
        others
          args += ".png"
      endWhich

      local file = File( args )
      local image = ImageList.selected.image
      image.file = file

      Vimage.execute( CmdWrite )

    method syntax->String
      if (VimageUI.command.after_first(' ').count?) return "filepath.[png|jpg] (save image)"

      if (ImageView.image and ImageView.image.file)
        return "[$] (save image)"(ImageView.image.file.value.filepath)
      else
        return "filepath.[png|jpg] (save image)"
      endIf
endClass

class CmdLineSave : CmdLineHandler [singleton]
  PROPERTIES
    keyword = "save"

  METHODS
    method execute( args:String )
      if (not ImageList.selected)
        status = "save [no current image]"
        return
      endIf

      if (args == "")
        Vimage.execute( CmdSave )
        return
      endIf

      which (File(args).extension.to_lowercase)
        case "png", "jpg", "jpeg", "tiff", "bmp", "gif"
          noAction
        others
          args += ".png"
      endWhich

      local file = File( args )
      local image = ImageList.selected.image
      image.file = file

      Vimage.execute( CmdSave )

    method syntax->String
      if (VimageUI.command.after_first(' ').count?) return "filepath.[png|jpg] (save image)"

      if (ImageView.image and ImageView.image.file)
        return "[$] (save image)"(ImageView.image.file.value.filepath)
      else
        return "filepath.[png|jpg] (save image)"
      endIf
endClass

class CmdLineWriteAll : CmdLineHandler [singleton]
  PROPERTIES
    keyword = "wall"
    syntax  = "(write all; save all modified images)"

  METHODS
    method execute( args:String )
      execute( CmdWriteAll )
endClass

class CmdLineWriteQuit : CmdLineHandler [singleton]
  PROPERTIES
    keyword = "wq"

  METHODS
    method execute( args:String )
      if (not ImageList.selected)
        status = "wq [no current image]"
        return
      endIf

      if (args == "")
        Vimage.execute( CmdWrite )
        Vimage.execute( CmdQuit() )
        return
      endIf

      which (File(args).extension.to_lowercase)
        case "png", "jpg", "jpeg", "tiff", "bmp", "gif"
          noAction
        others
          args += ".png"
      endWhich

      local file = File( args )
      local image = ImageList.selected.image
      image.file = file

      Vimage.execute( CmdWrite )
      Vimage.execute( CmdQuit() )

    method syntax->String
      if (VimageUI.command.after_first(' ').count?) return "filepath.[png|jpg] (save image and quit)"

      if (ImageView.image and ImageView.image.file)
        return "[$] (save image and quit)"(ImageView.image.file.value.filepath)
      else
        return "filepath.[png|jpg] (save image and quit)"
      endIf
endClass

