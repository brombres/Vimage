module Vimage
uses Geometry

class CmdLineHandler
  PROPERTIES
    keyword   : String
    alternate : String
    syntax    : String

  METHODS
    method execute( args:String )
      set_status( "[Unimplemented command: $]"(keyword.appending(args)) )

    method execute( cmd:Cmd )
      Vimage.execute( cmd )

    method keyword->String
      return @keyword

    method parse_anchor( args:String )->Anchor?
      if (args == "") return Vimage.anchor

      if (args.count == 2) args = "$ $"(args[0],args[1])

      local x = 0.5
      local y = 0.5
      forEach (word in args.split(' '))
        which (word)
          case "top","t":    y = 0.0
          case "bottom","b": y = 1.0
          case "left","l":   x = 0.0
          case "right","r":  x = 1.0
          case "center","c": noAction
          others
            status = "anchor [invalid anchor specifier '$']"(word)
            return null
        endWhich
      endForEach

      return Anchor(RealXY(x,y))

    method parse_color( arg:String )->ColorValue?
      local result : Color?

      contingent
        forEach (ch in arg)
          necessary (ch.is_number(16))
        endForEach

        which (arg.count)
          case 0
            set_status( "$ [missing color specification]"(keyword) )
            return null
          case 1  # V        -> 0xFFVVVVVV
            local v = arg->Int32( &base=16 )
            v |= v:<<:4
            result = Color( v, v, v )
          case 2  # Vv       -> 0xFFVvVvVv
            local v = arg->Int32( &base=16 )
            result = Color( v, v, v )
          case 3  # RGB      -> 0xFFRRGGBB
            local r = arg[0].to_number( &base=16 )
            local g = arg[1].to_number( &base=16 )
            local b = arg[2].to_number( &base=16 )
            r |= r:<<:4
            g |= g:<<:4
            b |= b:<<:4
            result = Color( r, g, b )
          case 4  # ARGB     -> 0xAARRGGBB
            local a = arg[0].to_number( &base=16 )
            local r = arg[1].to_number( &base=16 )
            local g = arg[2].to_number( &base=16 )
            local b = arg[3].to_number( &base=16 )
            a |= a:<<:4
            r |= r:<<:4
            g |= g:<<:4
            b |= b:<<:4
            result = Color( r, g, b, a )
          case 6  # RRGGBB   -> 0xFFRRGGBB
            local r = arg.substring(0,2)->Int32( &base=16 )
            local g = arg.substring(2,2)->Int32( &base=16 )
            local b = arg.substring(4,2)->Int32( &base=16 )
            result = Color( r, g, b )
          case 8  # AARRGGBB -> 0xAARRGGBB
            local a = arg.substring(0,2)->Int32( &base=16 )
            local r = arg.substring(2,2)->Int32( &base=16 )
            local g = arg.substring(4,2)->Int32( &base=16 )
            local b = arg.substring(6,2)->Int32( &base=16 )
            result = Color( r, g, b, a )
        endWhich

      unsatisfied
        arg .= replacing(' ','_').replacing('-','_')
        which (arg)
          case "black":       result = Color( 0xff000000 )
          case "blue":        result = Color( 0xff0000FF )
          case "brown":       result = Color( 0xff882222 )
          case "cyan":        result = Color( 0xff00FFFF )
          case "dark_gray":   result = Color( 0xff444444 )
          case "dark_green":  result = Color( 0xff008800 )
          case "gray":        result = Color( 0xff888888 )
          case "green":       result = Color( 0xff00FF00 )
          case "light_gray":  result = Color( 0xffCCCCCC )
          case "light_green": result = Color( 0xff88FF88 )
          case "magenta":     result = Color( 0xffFF00FF )
          case "orange":      result = Color( 0xffFF8800 )
          case "pink":        result = Color( 0xffFFCCCC )
          case "purple":      result = Color( 0xff880088 )
          case "red":         result = Color( 0xffFF0000 )
          case "rogue_blue":  result = Color( 0xff3333FF )
          case "royal_blue":  result = Color( 0xff4169E1 )
          case "sky_blue":    result = Color( 0xff87CEEB )
          case "transparent": result = Color( 0 )
          case "clear":       result = Color( 0 )
          case "yellow":      result = Color( 0xffFFFF00 )
          case "white":       result = Color( 0xffFFFFFF )
          case "random":      return ColorValue( Color.BLACK, &is_random )
        endWhich
      endContingent

      if (result) return ColorValue( result.value )

      set_status( "[Syntax error: invalid color '$']"(arg) )
      return null

    method parse_ratio( arg:String )->XY?
      local pair = arg.split(':')
      if (pair.count == 2)
        local x = pair.first->Int32
        local y = pair.last->Int32
        if (x->String == pair.first and y->String == pair.last)
          return XY(x,y)
        else
          set_status( "$ [invalid aspect ratio '$']"(keyword,arg) )
          return null
        endIf
      else
        set_status( "$ [missing or invalid aspect ratio specification]"(keyword) )
        return null
      endIf

    method parse_size( arg:String )->XY?
      local pair = arg.split('x')
      if (pair.count == 2)
        local x = pair.first->Int32
        local y = pair.last->Int32
        if (x->String == pair.first and y->String == pair.last)
          return XY(x,y)
        else
          set_status( "$ [invalid size '$']"(keyword,arg) )
          return null
        endIf
      else
        set_status( "$ [missing or invalid size specification]"(keyword) )
        return null
      endIf

    method parse_size_either_or( arg:String )->(width:Int32?,height:Int32?)
      if (arg.contains('.')) return (width:null,height:null) # contains a scale, not a size

      local pair = arg.split('x')
      if (pair.count == 2)
        contingent
          necessary (pair.first != "" or pair.last != "")
          necessary (pair.first == "" or pair.first->Int32->String == pair.first)
          necessary (pair.last == "" or pair.last->Int32->String == pair.last)

          if (pair.first == "")
            return (width:null,height:pair.last->Int32)
          else
            if (pair.last == "") return (width:pair.first->Int32,height:null)
            else                 return (width:pair.first->Int32,height:pair.last->Int32)
          endIf
        endContingent
      endIf

      set_status( "$ [missing or invalid size specification '$']"(keyword,arg) )
      return (width:null,height:null)

    method parse_scale_either_or( arg:String )->(width:Real?,height:Real?)
      local pair = arg.split('x')
      if (pair.count == 2)
        contingent
          necessary (pair.first != "" or pair.last != "")

          if (pair.first == "")
            return (width:null,height:pair.last->Real)
          else
            if (pair.last == "") return (width:pair.first->Real,height:null)
            else                 return (width:pair.first->Real,height:pair.last->Real)
          endIf
        endContingent
      endIf

      set_status( "$ [missing or invalid size specification '$']"(keyword,arg) )
      return (width:null,height:null)

    method set_state( new_state:State )
      State.current.change_state( new_state )

    method set_status( text:String, &dim )
      use builder = StatusBar
        if (dim) builder.style.dim
        builder.print text
        if (dim) builder.style.dim_off
      endUse

    method syntax->String
      return @syntax
endClass

class CmdLineAnchor : CmdLineHandler [singleton]
  PROPERTIES
    keyword = "anchor"
    syntax = "[center|top|bottom|left|right|c|t|b|l|r]+"

  METHODS
    method execute( args:String )
      if local anchor = parse_anchor( args )
        Vimage.anchor = anchor

        use status = StatusBar
          status.print "anchor"
          if (Vimage.anchor.position == RealXY(0.5,0.5))
            status.print " center"
          else
            which (Vimage.anchor.position.y)
              case 0.0: status.print " top"
              case 1.0: status.print " bottom"
            endWhich
            which (Vimage.anchor.position.x)
              case 0.0: status.print " left"
              case 1.0: status.print " right"
            endWhich
          endIf
        endUse
      endIf
endClass

class CmdLineAspect : CmdLineHandler [singleton]
  PROPERTIES
    keyword = "aspect"

  METHODS
    method execute( args:String )
      if local size = parse_ratio( args )
        execute( CmdAspect(size) )
      else
        status = "aspect [missing or invalid size specification]"
      endIf

    method syntax->String
      if (not ImageList.selected) return "W:H"
      local bitmap = ImageList.selected.image.bitmap
      local w = bitmap.width
      local h = bitmap.height

      local result = String()
      result.print "[W:H|"
      result.print w
      result.print ':'
      result.print h
      local min_w = w
      local min_h = h
      while (min_w % 2 == 0 and min_h % 2 == 0)
        min_w /= 2
        min_h /= 2
      endWhile

      local repeat = true
      while (repeat)
        repeat = false
        forEach (d in 3..min_w.sqrt)
          if (min_w % d == 0 and min_h % d == 0)
            min_w /= d
            min_h /= d
            repeat = true
            escapeForEach
          endIf
        endForEach
      endWhile

      if (min_w != w)
        result.print '|'
        result.print min_w
        result.print ':'
        result.print min_h
      endIf
      result.print ']'
      return result

endClass

class CmdLineBG : CmdLineHandler [singleton]
  PROPERTIES
    keyword = "bg"
    syntax  = "[V|RGB|ARGB|RRGGBB|AARRGGBB|transparent|clear|red|yellow|...|random]"

  METHODS
    method execute( args:String )
      if local color = parse_color( args )
        execute( CmdSetBGColor(color) )
      endIf
endClass

class CmdLineCopy : CmdLineHandler [singleton]
  PROPERTIES
    keyword = "copy"
    syntax  = "source:[a|r|g|b|XX] destination-channel:[a|r|g|b]+"

  METHODS
    method execute( args:String )
      block args = args.split(' ')
        if (args.count == 2)
          local a = parse_channels( args.first )
          local b = parse_channels( args.last, &allow_multiple )
          if (not a or not b) return
          execute( CmdCopy(a,b) )
        else
          status = "copy [expected <source-channel> <destination-channels>]"
        endIf
      endBlock

    method parse_channels( args:String, &allow_multiple )->String
      if (allow_multiple)
        local channels = 0
        forEach (ch in args)
          if (not "bgra".locate(ch))
            status = ''copy [illegal destination channel specification '$']''(ch)
            return null
          endIf
        endForEach
      elseIf (args.count == 1)
        if (not "bgra".locate(args) and not args[0].is_number(&base=16))
          status = ''copy [illegal source channel or value specification '$']''(args[0])
          return null
        endIf
      else
        if (args->Int32(&base=16)->String(&hex).rightmost(2).to_uppercase != args.to_uppercase)
          status = ''copy [illegal source channel or value specification '$']''(args)
          return null
        endIf
      endIf

      return args
endClass

class CmdLineCrop : CmdLineHandler [singleton]
  PROPERTIES
    keyword = "crop"
    syntax  = "[WxH|Wx|xH|N|LEFT TOP RIGHT BOTTOM]"

  METHODS
    method execute( arg_string:String )
      local args = arg_string.split(' ')
      if (args.count == 4)
        execute( CmdCrop(args[0],args[1],args[2],args[3]) )
      elseIf (args.count == 1 and not args[0].contains('x'))
        local n = args[0]->Int32
        execute( CmdCrop(n,n,n,n) )
      else
        local (w,h) = parse_size_either_or( arg_string )
        if (w or h)
          execute( CmdCropToSize(w,h) )
        else
          local (sx,sy) = parse_scale_either_or( arg_string )
          if (sx or sy)
            execute( CmdCropToScale(sx,sy) )
          else
            status = "crop [missing or invalid size specification]"
          endIf
        endIf
      endIf

endClass

class CmdLineFill : CmdLineHandler [singleton]
  PROPERTIES
    keyword = "fill"
    syntax  = "[WxH|Wx|xH]"

  METHODS
    method execute( args:String )
      local (w,h) = parse_size_either_or( args )
      if (w or h)
        execute( CmdFillToSize(w,h) )
      else
        local (sx,sy) = parse_scale_either_or( args )
        if (sx or sy)
          execute( CmdFillToScale(sx,sy) )
        else
          status = "fill [missing or invalid size specification]"
        endIf
      endIf
endClass

class CmdLineFit : CmdLineHandler [singleton]
  PROPERTIES
    keyword = "fit"
    syntax  = "[WxH|Wx|xH]"

  METHODS
    method execute( args:String )
      local (w,h) = parse_size_either_or( args )
      if (w or h)
        execute( CmdFitToSize(w,h) )
      else
        local (sx,sy) = parse_scale_either_or( args )
        if (sx or sy)
          execute( CmdFitToScale(sx,sy) )
        else
          status = "fit [missing or invalid size specification]"
        endIf
      endIf
endClass

class CmdLineGradient : CmdLineHandler [singleton]
  PROPERTIES
    keyword = "gradient"
    syntax  = "COLOR-1 COLOR-2 [COLOR-3 COLOR-4]"

  METHODS
    method execute( arg_line:String )
      local args = arg_line.split(' ')
      which (args.count)
        case 2
          if local a = parse_color( args[0] )
            if local b = parse_color( args[1] )
              execute( CmdGradient2(a,b) )
            endIf
          endIf
        case 4
          if local a = parse_color( args[0] )
            if local b = parse_color( args[1] )
              if local c = parse_color( args[2] )
                if local d = parse_color( args[3] )
                  execute( CmdGradient4(a,b,c,d) )
                endIf
              endIf
            endIf
          endIf
        others
      endWhich

endClass

class CmdLineHardAlpha : CmdLineHandler [singleton]
  PROPERTIES
    keyword = "ha"

  METHODS
    method execute( args:String )
      Vimage.hard_alpha = not Vimage.hard_alpha

      if (Vimage.hard_alpha) status = "[hard alpha on]"
      else                   status = "[hard alpha off]"

      if (ImageList.selected)
        ImageList.selected.image.cached_text_canvas = null
        ImageView.mark_modified
      endIf

    method syntax->String
      if (Vimage.hard_alpha) return "(turn hard alpha off)"
      else                   return "(turn hard alpha on)"

endClass

class CmdLineJoin : CmdLineHandler [singleton]
  PROPERTIES
    keyword = "join"
    syntax  = "[h|v|WxH]"

  METHODS
    method execute( args:String )
      if (args == "h")
        execute( CmdJoin(XY(2,1)) )
      elseIf (args == "v")
        execute( CmdJoin(XY(1,2)) )
      else
        if local size = parse_size( args )
          execute( CmdJoin(size) )
        endIf
      endIf
endClass

class CmdLineLiteralBitwiseAND : CmdLineHandler [singleton]
  PROPERTIES
    keyword = "&"
    syntax  = "[V|RGB|ARGB|RRGGBB|AARRGGBB|transparent|clear|red|yellow|...]"

  METHODS
    method execute( args:String )
      if local color = parse_color( args )
        execute( CmdLiteralBitwiseAND(color->Color.argb) )
      endIf
endClass

class CmdLineLiteralBitwiseOR : CmdLineHandler [singleton]
  PROPERTIES
    keyword = "|"
    syntax  = "[V|RGB|ARGB|RRGGBB|AARRGGBB|transparent|clear|red|yellow|...]"

  METHODS
    method execute( args:String )
      if local color = parse_color( args )
        execute( CmdLiteralBitwiseOR(color->Color.argb) )
      endIf
endClass

class CmdLineLiteralBitwiseXOR : CmdLineHandler [singleton]
  PROPERTIES
    keyword = "~"
    syntax  = "[V|RGB|ARGB|RRGGBB|AARRGGBB|transparent|clear|red|yellow|...]"

  METHODS
    method execute( args:String )
      if local color = parse_color( args )
        execute( CmdLiteralBitwiseXOR(color->Color.argb) )
      endIf
endClass

class CmdLineLiteralBitwiseROL : CmdLineHandler [singleton]
  PROPERTIES
    keyword = "<"
    syntax  = "BIT-COUNT [a] (include 'a' to include alpha channel)"

  METHODS
    method execute( args:String )
      local include_alpha = args.contains('a')
      if (include_alpha) args = args.replacing("a","").trimmed
      local n = args->Int32
      if (n->String == args)
        execute( CmdLiteralBitwiseROL(n,&=include_alpha) )
      endIf
endClass

class CmdLineLiteralBitwiseROR : CmdLineHandler [singleton]
  PROPERTIES
    keyword = ">"
    syntax  = "BIT-COUNT [a] (include 'a' to include alpha channel)"

  METHODS
    method execute( args:String )
      local include_alpha = args.contains('a')
      if (include_alpha) args = args.replacing("a","").trimmed
      local n = args->Int32
      if (n->String == args)
        execute( CmdLiteralBitwiseROR(n,&=include_alpha) )
      endIf
endClass

class CmdLineNew : CmdLineHandler [singleton]
  PROPERTIES
    keyword = "new"

  METHODS
    method execute( args:String )
      local sz : XY

      if (args.count == 0)
        sz = default_size
      else
        if local size = parse_size( args )
          sz = size
        endIf
      endIf

      execute( CmdNew(sz) )

    method default_size->XY
      if local selected = ImageList.selected
        if local image = selected.image
          return image.bitmap.size
        endIf
      endIf
      return ImageView.size * XY(1,2)

    method syntax->String
      if (VimageUI.command.after_first(' ').count?) return "WxH"

      localize default_size
      return "$x$"(default_size.x,default_size.y)
endClass

class CmdLineOpen : CmdLineHandler [singleton]
  PROPERTIES
    keyword = "open"
    syntax  = "[filepath|wildcard/**/*.filepath]"

  METHODS
    method execute( arg_line:String )
      if (arg_line == "") return
      local args = Scanner( arg_line ).scan_args
      execute( CmdOpen(args) )

endClass

class CmdLineQuit : CmdLineHandler [singleton]
  PROPERTIES
    keyword   = "q"
    syntax    = "(quit)"

  METHODS
    method execute( args:String )
      execute( CmdQuit() )

endClass

class CmdLineForceQuit : CmdLineHandler [singleton]
  PROPERTIES
    keyword = "q!"
    syntax  = "(force-quit)"

  METHODS
    method execute( args:String )
      execute( CmdQuit(&force) )

endClass

class CmdLineQuitAll : CmdLineHandler [singleton]
  PROPERTIES
    keyword = "qq"
    syntax  = "(quit all)"

  METHODS
    method execute( args:String )
      execute( CmdQuitAll() )

endClass

class CmdLineForceQuitAll : CmdLineHandler [singleton]
  PROPERTIES
    keyword = "qq!"
    syntax  = "(force-quit all)"

  METHODS
    method execute( args:String )
      execute( CmdQuitAll(&force) )

endClass

class CmdLineSelectIndex( index:Int32 ) : CmdLineHandler
  METHODS
    method execute( args:String )
      execute( CmdSelectIndex(index) )

    method keyword->String
      return index->String

    method syntax->String
      return "(select image $)"(index)
endClass

class CmdLineSplit : CmdLineHandler [singleton]
  PROPERTIES
    keyword = "split"
    syntax  = "WxH"

  METHODS
    method execute( args:String )
      if local size = parse_size( args )
        execute( CmdSplit(size) )
      endIf
endClass

class CmdLineRemove : CmdLineHandler [singleton]
  PROPERTIES
    keyword = "rm"
    syntax  = "(permanently deletes this image file from its folder)"

  METHODS
    method execute( arg_line:String )
      execute( CmdRemove )

endClass

class CmdLineResize : CmdLineHandler [singleton]
  PROPERTIES
    keyword = "resize"
    syntax  = "[WxH|Wx|xH]"

  METHODS
    method execute( args:String )
      local (w,h) = parse_size_either_or( args )
      if (w or h)
        execute( CmdResizeToSize(w,h) )
      else
        local (sx,sy) = parse_scale_either_or( args )
        if (sx or sy)
          execute( CmdResizeToScale(sx,sy) )
        else
          status = "resize [missing or invalid size specification]"
        endIf
      endIf
endClass

class CmdLineSwap : CmdLineHandler [singleton]
  PROPERTIES
    keyword = "swap"
    syntax  = "[a|r|g|b] [a|r|g|b]"

  METHODS
    method execute( args:String )
      local (a,b) = parse_channels( args )
      execute( CmdSwap(a,b) )

    method parse_channels( args:String )->(Int32,Int32)
      # Returns a channel index pair. Each value:
      #   b -> 0
      #   g -> 1
      #   r -> 2
      #   a -> 3
      block args = args.split(' ')
        if (args.count == 2 and args[0].count == 1 and args[1].count == 1)
          if local a_index = "bgra".locate( args[0] )
            if local b_index = "bgra".locate( args[1] )
              return (a_index,b_index)
            endIf
          endIf
        endIf
      endBlock

      status = ''swap [expected [a|r|g|b] pair (e.g. 'swap r b')]''
      return (0,0)
endClass


class CmdLineWrite : CmdLineHandler [singleton]
  PROPERTIES
    keyword = "w"

  METHODS
    method execute( args:String )
      if (not ImageList.selected)
        status = "w [no current image]"
        return
      endIf

      if (args == "")
        Vimage.execute( CmdWrite )
        return
      endIf

      which (File(args).extension.to_lowercase)
        case "png", "jpg", "jpeg", "tiff", "bmp", "gif"
          noAction
        others
          args += ".png"
      endWhich

      local file = File( args )
      local image = ImageList.selected.image
      image.file = file

      Vimage.execute( CmdWrite )

    method syntax->String
      if (VimageUI.command.after_first(' ').count?) return "filepath.[png|jpg] (save image)"

      if (ImageView.image and ImageView.image.file)
        return "[$] (save image)"(ImageView.image.file.value.filepath)
      else
        return "filepath.[png|jpg] (save image)"
      endIf
endClass

class CmdLineWriteAll : CmdLineHandler [singleton]
  PROPERTIES
    keyword = "wall"
    syntax  = "(write all; save all modified images)"

  METHODS
    method execute( args:String )
      execute( CmdWriteAll )
endClass

class CmdLineWriteQuit : CmdLineHandler [singleton]
  PROPERTIES
    keyword = "wq"

  METHODS
    method execute( args:String )
      if (not ImageList.selected)
        status = "wq [no current image]"
        return
      endIf

      if (args == "")
        Vimage.execute( CmdWrite )
        Vimage.execute( CmdQuit() )
        return
      endIf

      which (File(args).extension.to_lowercase)
        case "png", "jpg", "jpeg", "tiff", "bmp", "gif"
          noAction
        others
          args += ".png"
      endWhich

      local file = File( args )
      local image = ImageList.selected.image
      image.file = file

      Vimage.execute( CmdWrite )
      Vimage.execute( CmdQuit() )

    method syntax->String
      if (VimageUI.command.after_first(' ').count?) return "filepath.[png|jpg] (save image and quit)"

      if (ImageView.image and ImageView.image.file)
        return "[$] (save image and quit)"(ImageView.image.file.value.filepath)
      else
        return "filepath.[png|jpg] (save image and quit)"
      endIf
endClass

