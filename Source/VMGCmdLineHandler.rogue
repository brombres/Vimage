module Vimage
uses Geometry

class VMGCmdLineHandler
  PROPERTIES
    keyword : String
    syntax  : String

  METHODS
    method execute( args:String )
      set_status( "[Unimplemented command: $]"(keyword.appending(args)) )

    method execute( cmd:VMGCmd )
      Vimage.execute( cmd )

    method color_string( color:Color )->String
      local parts = color.argb->String( &hex ).split( 2 )
      parts[1] .= to_lowercase
      parts[3] .= to_lowercase
      return parts.join("")

    method parse_anchor( args:String )->Anchor?
      if (args == "") return Vimage.anchor

      if (args.count == 2) args = "$ $"(args[0],args[1])

      local x = 0.5
      local y = 0.5
      forEach (word in args.split(' '))
        which (word)
          case "top","t":    y = 0.0
          case "bottom","b": y = 1.0
          case "left","l":   x = 0.0
          case "right","r":  x = 1.0
          case "center","c": noAction
          others
            status = "anchor [invalid anchor specifier '$']"(word)
            return null
        endWhich
      endForEach

      return Anchor(RealXY(x,y))

    method parse_color( arg:String )->Color?
      contingent
        forEach (ch in arg)
          necessary (ch.is_number(16))
        endForEach

        which (arg.count)
          case 0
            set_status( "$ [missing color specification]"(keyword) )
            return null
          case 1  # V        -> 0xFFVVVVVV
            local v = arg->Int32( &base=16 )
            v |= v:<<:4
            return Color( v, v, v )
          case 2  # Vv       -> 0xFFVvVvVv
            local v = arg->Int32( &base=16 )
            return Color( v, v, v )
          case 3  # RGB      -> 0xFFRRGGBB
            local r = arg[0].to_number( &base=16 )
            local g = arg[1].to_number( &base=16 )
            local b = arg[2].to_number( &base=16 )
            r |= r:<<:4
            g |= g:<<:4
            b |= b:<<:4
            return Color( r, g, b )
          case 4  # ARGB     -> 0xAARRGGBB
            local a = arg[0].to_number( &base=16 )
            local r = arg[1].to_number( &base=16 )
            local g = arg[2].to_number( &base=16 )
            local b = arg[3].to_number( &base=16 )
            a |= a:<<:4
            r |= r:<<:4
            g |= g:<<:4
            b |= b:<<:4
            return Color( r, g, b, a )
          case 6  # RRGGBB   -> 0xFFRRGGBB
            local r = arg.substring(0,2)->Int32( &base=16 )
            local g = arg.substring(2,2)->Int32( &base=16 )
            local b = arg.substring(4,2)->Int32( &base=16 )
            return Color( r, g, b )
          case 8  # AARRGGBB -> 0xAARRGGBB
            local a = arg.substring(0,2)->Int32( &base=16 )
            local r = arg.substring(2,2)->Int32( &base=16 )
            local g = arg.substring(4,2)->Int32( &base=16 )
            local b = arg.substring(6,2)->Int32( &base=16 )
            return Color( r, g, b, a )
        endWhich

      unsatisfied
        arg .= replacing(' ','_').replacing('-','_')
        which (arg)
          case "black":       return Color( 0xff000000 )
          case "blue":        return Color( 0xff0000FF )
          case "brown":       return Color( 0xff882222 )
          case "cyan":        return Color( 0xff00FFFF )
          case "dark_gray":   return Color( 0xff444444 )
          case "dark_green":  return Color( 0xff008800 )
          case "gray":        return Color( 0xff888888 )
          case "green":       return Color( 0xff00FF00 )
          case "light_gray":  return Color( 0xffCCCCCC )
          case "light_green": return Color( 0xff88FF88 )
          case "magenta":     return Color( 0xffFF00FF )
          case "orange":      return Color( 0xffFF8800 )
          case "pink":        return Color( 0xffFFCCCC )
          case "purple":      return Color( 0xff880088 )
          case "red":         return Color( 0xffFF0000 )
          case "rogue_blue":  return Color( 0xff3333FF )
          case "royal_blue":  return Color( 0xff4169E1 )
          case "sky_blue":    return Color( 0xff87CEEB )
          case "transparent": return Color( 0 )
          case "clear":       return Color( 0 )
          case "yellow":      return Color( 0xffFFFF00 )
          case "white":       return Color( 0xffFFFFFF )
        endWhich
      endContingent

      set_status( "[Syntax error: invalid color '$']"(arg) )
      return null

    method parse_ratio( arg:String )->XY?
      local pair = arg.split(':')
      if (pair.count == 2)
        local x = pair.first->Int32
        local y = pair.last->Int32
        if (x->String == pair.first and y->String == pair.last)
          return XY(x,y)
        else
          set_status( "$ [invalid aspect ratio '$']"(keyword,arg) )
          return null
        endIf
      else
        set_status( "$ [missing or invalid aspect ratio specification]"(keyword) )
        return null
      endIf

    method parse_size( arg:String )->XY?
      local pair = arg.split('x')
      if (pair.count == 2)
        local x = pair.first->Int32
        local y = pair.last->Int32
        if (x->String == pair.first and y->String == pair.last)
          return XY(x,y)
        else
          set_status( "$ [invalid size '$']"(keyword,arg) )
          return null
        endIf
      else
        set_status( "$ [missing or invalid size specification]"(keyword) )
        return null
      endIf

    method parse_size_either_or( arg:String )->(width:Int32?,height:Int32?)
      local pair = arg.split('x')
      if (pair.count == 2)
        contingent
          necessary (pair.first != "" or pair.last != "")
          necessary (pair.first == "" or pair.first->Int32->String == pair.first)
          necessary (pair.last == "" or pair.last->Int32->String == pair.last)

          if (pair.first == "")
            return (width:null,height:pair.last->Int32)
          else
            if (pair.last == "") return (width:pair.first->Int32,height:null)
            else                 return (width:pair.first->Int32,height:pair.last->Int32)
          endIf
        endContingent
      endIf

      set_status( "$ [missing or invalid size specification '$']"(keyword,arg) )
      return (width:null,height:null)

    method set_state( new_state:VMGState )
      VMGState.current.change_state( new_state )

    method set_status( text:String, &dim )
      use builder = VMGStatusBar
        if (dim) builder.style.dim
        builder.print text
        if (dim) builder.style.dim_off
      endUse

    method syntax->String
      return @syntax
endClass

class CmdLineAnchor : VMGCmdLineHandler [singleton]
  PROPERTIES
    keyword = "anchor"
    syntax = "[center|top|bottom|left|right|c|t|b|l|r]+"

  METHODS
    method execute( args:String )
      if local anchor = parse_anchor( args )
        Vimage.anchor = anchor

        use status = VMGStatusBar
          status.print "anchor"
          if (Vimage.anchor.position == RealXY(0.5,0.5))
            status.print " center"
          else
            which (Vimage.anchor.position.y)
              case 0.0: status.print " top"
              case 1.0: status.print " bottom"
            endWhich
            which (Vimage.anchor.position.x)
              case 0.0: status.print " left"
              case 1.0: status.print " right"
            endWhich
          endIf
        endUse
      endIf
endClass

class CmdLineAspect : VMGCmdLineHandler [singleton]
  PROPERTIES
    keyword = "aspect"

  METHODS
    method execute( args:String )
      if local size = parse_ratio( args )
        execute( VMGCmdAspect(size) )
      else
        status = "aspect [missing or invalid size specification]"
      endIf

    method syntax->String
      if (not VMGImageList.selected) return "WxH"
      local bitmap = VMGImageList.selected.image.bitmap
      local w = bitmap.width
      local h = bitmap.height

      local result = String()
      result.print "[W:H|"
      result.print w
      result.print ':'
      result.print h
      local min_w = w
      local min_h = h
      while (min_w % 2 == 0 and min_h % 2 == 0)
        min_w /= 2
        min_h /= 2
      endWhile

      local repeat = true
      while (repeat)
        repeat = false
        forEach (d in 3..min_w.sqrt)
          if (min_w % d == 0 and min_h % d == 0)
            min_w /= d
            min_h /= d
            repeat = true
            escapeForEach
          endIf
        endForEach
      endWhile

      if (min_w != w)
        result.print '|'
        result.print min_w
        result.print ':'
        result.print min_h
      endIf
      result.print ']'
      return result

endClass

class CmdLineBG : VMGCmdLineHandler [singleton]
  PROPERTIES
    keyword = "bg"
    syntax  = "[V|RGB|ARGB|RRGGBB|AARRGGBB|transparent|clear|red|yellow|...]"

  METHODS
    method execute( args:String )
      if local color = parse_color( args )
        status = "bg color $"(color_string(color))
        Vimage.bg_color = color
      endIf
endClass

class CmdLineCopy : VMGCmdLineHandler [singleton]
  PROPERTIES
    keyword = "copy"
    syntax  = "source:[a|r|g|b|XX] destination-channel:[a|r|g|b]+"

  METHODS
    method execute( args:String )
      block args = args.split(' ')
        if (args.count == 2)
          local a = parse_channels( args.first )
          local b = parse_channels( args.last, &allow_multiple )
          if (not a or not b) return
          execute( VMGCmdCopy(a,b) )
        else
          status = "copy [expected <source-channel> <destination-channels>]"
        endIf
      endBlock

    method parse_channels( args:String, &allow_multiple )->String
      if (allow_multiple)
        local channels = 0
        forEach (ch in args)
          if (not "bgra".locate(ch))
            status = ''copy [illegal destination channel specification '$']''(ch)
            return null
          endIf
        endForEach
      elseIf (args.count == 1)
        if (not "bgra".locate(args) and not args[0].is_number(&base=16))
          status = ''copy [illegal source channel or value specification '$']''(args[0])
          return null
        endIf
      else
        if (args->Int32(&base=16)->String(&hex).rightmost(2).to_uppercase != args.to_uppercase)
          status = ''copy [illegal source channel or value specification '$']''(args)
          return null
        endIf
      endIf

      return args
endClass

class CmdLineCrop : VMGCmdLineHandler [singleton]
  PROPERTIES
    keyword = "crop"
    syntax  = "[WxH|Wx|xH]"

  METHODS
    method execute( args:String )
      local (w,h) = parse_size_either_or( args )
      if (w or h)
        execute( VMGCmdCrop(w,h) )
      else
        status = "crop [missing or invalid size specification]"
      endIf

endClass

class CmdLineFill : VMGCmdLineHandler [singleton]
  PROPERTIES
    keyword = "fill"
    syntax  = "[WxH|Wx|xH]"

  METHODS
    method execute( args:String )
      local (w,h) = parse_size_either_or( args )
      if (w or h)
        execute( VMGCmdFill(w,h) )
      else
        status = "fill [missing or invalid size specification]"
      endIf
endClass

class CmdLineFit : VMGCmdLineHandler [singleton]
  PROPERTIES
    keyword = "fit"
    syntax  = "[WxH|Wx|xH]"

  METHODS
    method execute( args:String )
      local (w,h) = parse_size_either_or( args )
      if (w or h)
        execute( VMGCmdFit(w,h) )
      else
        status = "fit [missing or invalid size specification]"
      endIf
endClass

class CmdLineJoin : VMGCmdLineHandler [singleton]
  PROPERTIES
    keyword = "join"
    syntax  = "[h|v|WxH]"

  METHODS
    method execute( args:String )
      if (args == "h")
        execute( VMGCmdJoin(XY(2,1)) )
      elseIf (args == "v")
        execute( VMGCmdJoin(XY(1,2)) )
      else
        if local size = parse_size( args )
          execute( VMGCmdJoin(size) )
        endIf
      endIf
endClass

class CmdLineNew : VMGCmdLineHandler [singleton]
  PROPERTIES
    keyword = "new"

  METHODS
    method execute( args:String )
      local sz : XY

      if (args.count == 0)
        sz = default_size
      else
        if local size = parse_size( args )
          sz = size
        endIf
      endIf

      execute( VMGCmdNew(sz) )

    method default_size->XY
      if local selected = VMGImageList.selected
        if local image = selected.image
          return image.bitmap.size
        endIf
      endIf
      return VMGImageView.size * XY(1,2)

    method syntax->String
      if (VMGUI.command.after_first(' ').count?) return "WxH"

      localize default_size
      return "$x$"(default_size.x,default_size.y)
endClass

class CmdLineQuit : VMGCmdLineHandler [singleton]
  PROPERTIES
    keyword = "quit"

  METHODS
    method execute( args:String )
      execute( VMGCmdQuit )

endClass

class CmdLineQuitAll : VMGCmdLineHandler [singleton]
  PROPERTIES
    keyword = "qall"

  METHODS
    method execute( args:String )

endClass

class CmdLineSplit : VMGCmdLineHandler [singleton]
  PROPERTIES
    keyword = "split"
    syntax  = "WxH"

  METHODS
    method execute( args:String )
      if local size = parse_size( args )
        execute( VMGCmdSplit(size) )
      endIf
endClass

class CmdLineResize : VMGCmdLineHandler [singleton]
  PROPERTIES
    keyword = "resize"
    syntax  = "[WxH|Wx|xH]"

  METHODS
    method execute( args:String )
      local (w,h) = parse_size_either_or( args )
      if (w or h)
        execute( VMGCmdResize(w,h) )
      else
        status = "resize [missing or invalid size specification]"
      endIf
endClass

class CmdLineSwap : VMGCmdLineHandler [singleton]
  PROPERTIES
    keyword = "swap"
    syntax  = "[a|r|g|b] [a|r|g|b]"

  METHODS
    method execute( args:String )
      local (a,b) = parse_channels( args )
      execute( VMGCmdSwap(a,b) )

    method parse_channels( args:String )->(Int32,Int32)
      # Returns a channel index pair. Each value:
      #   b -> 0
      #   g -> 1
      #   r -> 2
      #   a -> 3
      block args = args.split(' ')
        if (args.count == 2 and args[0].count == 1 and args[1].count == 1)
          if local a_index = "bgra".locate( args[0] )
            if local b_index = "bgra".locate( args[1] )
              return (a_index,b_index)
            endIf
          endIf
        endIf
      endBlock

      status = ''swap [expected [a|r|g|b] pair (e.g. 'swap r b')]''
      return (0,0)
endClass


class CmdLineWrite : VMGCmdLineHandler [singleton]
  PROPERTIES
    keyword = "w"

  METHODS
    method execute( args:String )
      if (not VMGImageList.selected)
        status = "w [no current image]"
        return
      endIf

      if (args == "")
        if (VMGImageList.selected.image.file)
          args = VMGImageList.selected.image.file.value.filepath
        else
          status = "w [missing filepath]"
          return
        endIf
      else
        which (File(args).extension.to_lowercase)
          case "png", "jpg", "jpeg"
            noAction
          others
            args += ".png"
        endWhich
      endIf

      local file = File( args )
      local image = VMGImageList.selected.image
      image.file = file
      image.name = file.filepath
      local bitmap = image.bitmap
      which (File(args).extension.to_lowercase)
        case "png"
          file.save( bitmap.to_png_bytes )
        case "jpg", ".jpeg"
          file.save( bitmap.to_jpeg_bytes )
      endWhich
      status = ''"$" [$x$, $ bytes] written''(args,bitmap.width,bitmap.height,file.size.format(","))

      image.is_modified = false

    method syntax->String
      if (VMGUI.command.after_first(' ').count?) return "filepath.[png|jpg]"

      if (VMGImageView.image and VMGImageView.image.file)
        return "[$]"(VMGImageView.image.file.value.filepath)
      else
        return "filepath.[png|jpg]"
      endIf
endClass

