module Vimage
uses Graphics

class Image
  PROPERTIES
    file        : File?
    bitmap      : Bitmap
    name        : String
    zoom        : Real64
    camera      = XY(0.5,0.5)
    is_modified : Logical
    error       : String

    cached_text_canvas    : TextCanvas
    cached_bitmap_size    : IntXY
    og_bitmap_size        : IntXY
    cached_view_center    : IntXY
    cached_display_bounds : IntBox

  METHODS
    method init( bitmap, name=null )
      is_modified = true

      if (bitmap.width == 0 or bitmap.height == 0)
        error = "Invalid zero-size bitmap"
        bitmap = Bitmap(1,1)
      endIf

    method init( bitmap, file )
      if (file) name = file.value.filepath

      if (bitmap.width == 0 or bitmap.height == 0)
        error = "Invalid zero-size bitmap"
        bitmap = Bitmap(1,1)
      endIf

    method init( file )
      name = file.value.filepath

    method bitmap->Bitmap
      if (@bitmap) return @bitmap

      if (file and file.value.exists)
        bitmap = Bitmap( file.value )
        if (not @bitmap)
          error = "Unsupported file type or corrupted file: " + file
          bitmap = Bitmap(1,1)
        endIf
      else
        bitmap = Bitmap(16,16)
        is_modified = true
      endIf

      forEach (item in ImageList)
        if (item->(as ImageListItem).image is this)
          item->(as ImageListItem).request_redraw
          if (ImageList.selected and this is ImageList.selected.image)
            ImageView.mark_modified
          endIf
          escapeForEach
        endIf
      endForEach

      return @bitmap

    method init( info:Value )
      bitmap = info//bitmap.to<<Bitmap>>
      name = which{ info//name:info//name->String || null }
      zoom = info//zoom
      camera = XY( info//camera//x, info//camera//y )
      error = which{ info//error:info//error->String || null }
      is_modified = info//is_modified

      if (info//filepath)
        file = File(info//filepath->String)
        if (not file.value.exists) is_modified = true
      endIf

      cached_text_canvas = null

    method cloned_bitmap->Bitmap
      # Editing commands operate on copies of bitmap objects for undo chain purposes.
      bitmap .= cloned
      is_modified = true
      return bitmap

    method compact_name->String
      local result = String()
      result.print( which{error:'!' || is_modified:'*' || ' '} )
      if (name)
        result.print File(name).filename.before_last('.')
        if (not error) result.print ' '
      endIf
      if (not error and @bitmap)
        result.print '['
        result.print bitmap.width
        result.print 'x'
        result.print bitmap.height
        result.print ']'
      endIf
      return result


    method set_is_modified( @is_modified )
      if (is_modified)
        forEach (item in ImageList)
          if (item->(as ImageListItem).image is this)
            item->(as ImageListItem).request_redraw
            if (ImageList.selected and this is ImageList.selected.image)
              ImageView.mark_modified
            endIf
            escapeForEach
          endIf
        endForEach
      endIf

    method size->IntXY
      return bitmap.size

    method text_canvas( bitmap_size:IntXY, display_bounds:IntBox )->TextCanvas
      contingent
        necessary (cached_text_canvas)
        necessary (bitmap_size == cached_bitmap_size)
        necessary (bitmap.size == og_bitmap_size)
        necessary (display_bounds == cached_display_bounds)
        necessary (camera == cached_view_center)
        return cached_text_canvas
      endContingent

      og_bitmap_size = bitmap.size
      cached_bitmap_size = bitmap_size
      cached_display_bounds = display_bounds
      cached_view_center = camera

      local canvas_size = bitmap_size / IntXY(1,2)
      if (bitmap_size.y & 1)
        canvas_size += IntXY(0,1)
      endIf

      local canvas_bounds = IntBox( (display_bounds.size/2-(canvas_size*camera)).clamped_high(IntXY.zero), canvas_size )
      canvas_bounds .= clamped( IntBox(display_bounds.size) )
      local bitmap_bounds = canvas_bounds * IntXY(1,2)
      local piece_size = ((display_bounds.size * IntXY(1,2) / zoom) + IntXY(0.5,0.5))->IntXY.clamped_high( bitmap.size )
      if ((piece_size.y * zoom)->Int32 & 1)
        local new_piece_size = ((piece_size * zoom) + IntXY(0,1)) / zoom
        local piece_bounds = IntBox( -bitmap_bounds.position/zoom, new_piece_size )
        if local intersection = piece_bounds & IntBox(bitmap.size)
          if intersection == piece_bounds
            piece_size = new_piece_size
          endIf
        endIf
      endIf

      local origin = -bitmap_bounds.position/zoom
      origin .= clamped_low( IntXY.zero )
      origin .= clamped_high( bitmap.size - piece_size )
      local piece = Bitmap( bitmap, IntBox(origin,piece_size) )
      local target_size = (piece_size*zoom)->IntXY.clamped_low(IntXY(1,1))

      piece.resize( target_size )

      if (Vimage.hard_alpha)
        local n = piece.pixels.count
        native @|RogueInt32* data  = $piece->pixels->as_int32s - 1;
                |
                |while (--$n >= 0)
                |{
                |  RogueInt32 argb = *(++data);
                |  RogueInt32 a;
                |  if ((a=(argb & 0xFF000000)) && a != 0xFF000000)
                |  {
                |    *data = argb | 0xFF000000;
                |  }
                |}
      endIf

      cached_text_canvas = piece->TextCanvas( &dither, &bg8=CharacterStyle.BG_DARK_GRAY, &bg24=Color(0xFF444444) )
      return cached_text_canvas

    method to->String
      if (@bitmap)
        if (name)
          if (error) return name
          return "$$ [$x$]"(which{is_modified:"*"||""},name,bitmap.width,bitmap.height)
        elseIf (is_modified)
          return "*[$x$]"(bitmap.width,bitmap.height)
        else
          return "[$x$]"(bitmap.width,bitmap.height)
        endIf
      else
        if (name)
          if (error) return name
          return "$$"(which{is_modified:"*"||""},name)
        elseIf (is_modified)
          return "*"
        else
          return "?"
        endIf
      endIf

    method to->Value
      return ...
      @{
        filepath:which{file:file.value.filepath||null},
        bitmap:Value(@bitmap),
        :name,
        :zoom,
        camera:{x:camera.x,y:camera.y},
        :error,
        :is_modified
      }
endClass

