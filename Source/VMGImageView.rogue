uses Console/ANSIBitmap
uses UI

class VMGImageView : UIComponent [singleton]
  PROPERTIES
    image          : VMGImage
    display_image  : Bitmap
    canvas         : TextCanvas
    scale_to_fit   = true
    min_zoom       : Real64
    is_modified    : Logical
    visible_bounds : Box

  METHODS
    method init

    method on_draw
      localize display_bounds

      if (image)
        if (is_modified)
          is_modified = false
          visible_bounds = Box( image.bitmap.size )
          local new_size : XY
          if (min_zoom)
            new_size = ((image.bitmap.size->RealXY * image.zoom) + RealXY(0.5,0.5))->XY
          else
            local scale = ((display_bounds.size->RealXY*RealXY(1,2)) / image.bitmap.size->RealXY).min
            new_size = ((image.bitmap.size->RealXY * scale) + RealXY(0.5,0.5))->XY
            min_zoom = new_size.x->Real64 / image.bitmap.width
            if (image.zoom)
              if (image.zoom < min_zoom)
                image.zoom = min_zoom
                image.view_center = RealXY(0.5,0.5)
              else
                new_size = ((image.bitmap.size->RealXY * image.zoom) + RealXY(0.5,0.5))->XY
              endIf
            else
              image.zoom = min_zoom
            endIf
          endIf
          VMGTitleBar.zoom = image.zoom
          display_image = image.bitmap.resized( new_size )
          if (new_size.y & 1)
            display_image.expand( 0, 0, 0, 1, Color.BLACK )
          endIf
          canvas = ANSIBitmap( display_image )->TextCanvas
        endIf

        ConsoleUICanvas.fill( display_bounds, StyledCharacter(' ',CharacterStyle.BG_BLACK) )

        temporarily ConsoleUICanvas.clip = display_bounds
          local sz = canvas.size
          local pos = Box( display_bounds.center - (sz*image.view_center), sz ).clamped( display_bounds ).top_left
          ConsoleUICanvas.draw( canvas, pos )
        endTemporarily

      else
        ConsoleUICanvas.fill( display_bounds, StyledCharacter(' ',CharacterStyle.BG_BLACK) )

      endIf

    method scroll( delta:RealXY )
      if (image)
        if (image.zoom == min_zoom)
          image.view_center = RealXY(0.5,0.5)
        elseIf (image.zoom)
          delta *= display_bounds.size / (image.bitmap.size * image.zoom)
          image.view_center = (image.view_center + delta).clamped( 0.0, 1.0 )
        endIf
        request_redraw
      endIf

    method show( new_image:VMGImage )
      if (image and image.zoom == min_zoom) image.zoom = 0

      if (new_image is image) return
      image = new_image
      min_zoom = 0
      is_modified = true
      scale_to_fit = true
      request_redraw

    method zoom_in
      if (image)
        if (image.zoom < 1.0)
          image.zoom *= 2
          if (image.zoom >= 1.0)
            image.zoom = 1.0
          else
            local n = 0
            while (image.zoom < 1.0)
              ++n
              image.zoom *= 2
            endWhile
            image.zoom = 1.0
            loop (n) image.zoom /= 2
          endIf
        endIf
        VMGTitleBar.zoom = image.zoom
        is_modified = true
        request_redraw
      endIf

    method zoom_out
      if (image)
        if (image.zoom > min_zoom)
          image.zoom /= 2
          if (image.zoom < min_zoom)
            image.zoom = min_zoom
            image.view_center = RealXY(0.5,0.5)
          endIf
        endIf
        VMGTitleBar.zoom = image.zoom
        is_modified = true
        request_redraw
      endIf
endClass
