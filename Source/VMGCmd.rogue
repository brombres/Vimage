uses Math/Best

class VMGCmd
  METHODS
    method execute

    method set_status( text:String, &dim )
      use builder = VMGStatusBar
        if (dim) builder.style.dim
        builder.print text
        if (dim) builder.style.dim_off
      endUse
endClass

class VMGCmdDD : VMGCmd [singleton]
  METHODS
    method execute
      if (VMGImageList.selected)
        set_status( "dd (delete image and copy to clipboard)" )
        Vimage.clipboard = VMGImageList.selected->(as VMGImageListItem).image
        local next = VMGImageList.selected.next
        VMGImageList.remove( VMGImageList.selected )
        if (next)
          VMGImageList.select( next->(as VMGImageListItem) )
        elseIf (VMGImageList.count)
          VMGImageList.select( VMGImageList.last_child->(as VMGImageListItem) )
        else
          VMGImageList.select( null )
        endIf
      else
        set_status( "[dd: nothing to delete]" )
      endIf
endClass

class VMGCmdNew( size:XY, bg_color:Color ) : VMGCmd
  METHODS
    method execute
      local before_index = 0
      if (VMGImageList.selected)
        if local index = VMGImageList.locate( VMGImageList.selected )
          before_index = index
        endIf
      endIf

      local bitmap = Bitmap( size ).[ clear(bg_color) ]
      local image  = VMGImage( bitmap )
      local item   = VMGImageListItem( image )
      VMGImageList.insert( item, before_index )
      VMGImageList.select( item )
      VMGImageList.request_layout

      status = "new image [$x$] ($)"(size.x,size.y,bg_color)
endClass

class VMGCmdJoin( dims:XY ) : VMGCmd
  METHODS
    method execute
      local w = dims.x
      local h = dims.y
      local total = w * h

      local has_images = which{ VMGImageList.count:"" || " [no images]" }
      if (total <= 1)
        status = "join $x$ [no effect]"(w,h)
        return
      elseIf (h == 1)
        if (w == 2) status = "n (join horizontal)$"(has_images)
        else             status = "$n (join horizontal)$"(w,has_images)
      elseIf (w == 1)
        if (h == 2) status = "N (join vertical)$"(has_images)
        else             status = "$N (join vertical)$"(h,has_images)
      elseIf (VMGImageList.count == 0)
        status = "join $x$ [no images]"(w,h)
        return
      else
        status = "join $x$"(w,h)
      endIf

      if (VMGImageList.count == 0) return

      use list = WorkList<<VMGImage>>
        loop (total)
          local index = VMGImageList.selected.index
          list.add( VMGImageList.selected.image )
          VMGImageList.remove( VMGImageList.selected )
          if (index < VMGImageList.count)
            VMGImageList.select( index )
          elseIf (VMGImageList.count > 0)
            VMGImageList.select( VMGImageList.last_child->(as VMGImageListItem) )
            escapeLoop
          else
            VMGImageList.select( null )
            escapeLoop
          endIf
        endLoop

        while (list.count < total)
          list.add( VMGImage(Bitmap(1,1).[clear(Vimage.bg_color)]) )
        endWhile

        # Scale up elements of each row to be same height.
        forEach (j in 0..<h)
          local max_height = Best<<Int32>>( (a,b) => a > b )
          forEach (i in 0..<w)
            max_height.consider( list[j*w+i].bitmap.height )
          endForEach

          block max_height = max_height.value
            forEach (i in 0..<w)
              local bitmap = list[j*w+i].bitmap
              bitmap.resize( bitmap.width*(max_height->Real64/bitmap.height), max_height )
            endForEach
          endBlock
        endForEach

        # Scale up elements of each column to be same width.
        forEach (i in 0..<w)
          local max_width = Best<<Int32>>( (a,b) => a > b )
          forEach (j in 0..<h)
            max_width.consider( list[j*w+i].bitmap.width )
          endForEach

          block max_width = max_width.value
            forEach (j in 0..<h)
              local bitmap = list[j*w+i].bitmap
              bitmap.resize( max_width, bitmap.height*(max_width->Real64/bitmap.width) )
            endForEach
          endBlock
        endForEach

        local total_w = 0
        total_w += list[ (forEach in 0..<w) ].bitmap.width
        local total_h = 0
        total_h += list[ (forEach in 0..<h)*w ].bitmap.height

        local result = Bitmap( total_w, total_h )
        local cursor_y = 0
        forEach (j in 0..<h)
          local cursor_x = 0
          local dy : Int32
          forEach (i in 0..<w)
            local bitmap = list[ j*w+i ].bitmap
            bitmap.blit( result, cursor_x, cursor_y )
            cursor_x += bitmap.width
            dy = bitmap.height
          endForEach
          cursor_y += dy
        endForEach

        local result_image = VMGImage( result )
        local before_index = which{ VMGImageList.selected:VMGImageList.selected.index || 0 }
        VMGImageList.insert( result_image, before_index )
        VMGImageList.select( result_image )

      endUse

endClass

class VMGCmdSwap( a:Int32, b:Int32 ) : VMGCmd
  METHODS
    method execute
      if ((a or b) and VMGImageView.image)
        local bitmap = VMGImageView.image.bitmap
        status = "swap channels $<>$"("bgra01"[a],"bgra01"[b])

        if (b < 4)
          local a_shift = a * 8
          local b_shift = b * 8
          forEach (color in rewriter=bitmap.pixels.rewriter)
            local a = (color.argb :>>>: a_shift) & 0xFF
            local b = (color.argb :>>>: b_shift) & 0xFF
            local argb = color.argb & !(0xFF:<<:a_shift) & !(0xFF:<<:b_shift)
            argb |= (a :<<: b_shift) | (b :<<: a_shift)
            rewriter.write( Color(argb) )
          endForEach
        else
          # Replace color channel with all 0's or all 1's
          local a_shift = a * 8
          local b = which{ b==4:0 || 255 } :<<: a_shift
          forEach (color in rewriter=bitmap.pixels.rewriter)
            local argb = color.argb & !(0xFF:<<:a_shift)
            argb |= b
            rewriter.write( Color(argb) )
          endForEach
        endIf

        VMGImageView.mark_modified
      endIf
endClass
