library Vimage

class State
  DEFINITIONS
    SHIFT   = (1:<<:16)
    CONTROL = (2:<<:16)
    ALT     = (4:<<:16)
    OS      = (8:<<:16)

  GLOBAL PROPERTIES
    current = State()

  GLOBAL METHODS
    method change_state( new_state:State )
      current.set_state( new_state )

  PROPERTIES
    key_handlers = [Int:Cmd]

  METHODS
    method cancel
      state = ImageListState
      set_status( "[cancelled]", &dim )

    method execute( cmd:Cmd )
      Vimage.execute( cmd )

    method on( e:KeyEvent )
      if (e.is_press)
        if local handler = key_handlers[ (e.modifier_key_state:<<:16) | e.keycode ]
          handler.on( e )
          return
        endIf
      endIf

    method on_enter
      noAction

    method on_leave
      noAction

    method set_state( new_state:State )
      current.on_leave
      current = new_state
      current.on_enter

    method set_status( text:String, &dim )
      use builder = StatusBar
        if (dim) builder.style.dim
        builder.print text
        if (dim) builder.style.dim_off
      endUse

    method state_name->String
      return ""
endClass

class StandardState : State
  METHODS
    method init
      key_handlers[Keycode.SEMICOLON+SHIFT] = CmdBeginCommandLine
      key_handlers[Keycode.NUMBER_0+SHIFT]  = CmdMaxZoom
      key_handlers[Keycode.NUMBER_1+SHIFT]  = CmdBitwiseNOT
      key_handlers[Keycode.NUMBER_7+SHIFT]  = CmdBitwiseAND
      key_handlers[Keycode.BACKSLASH+SHIFT] = CmdBitwiseOR
      key_handlers[Keycode.BACKQUOTE+SHIFT] = CmdBitwiseXOR
      key_handlers[Keycode.COMMA+SHIFT]     = CmdBitwiseRotateLeft
      key_handlers[Keycode.PERIOD+SHIFT]    = CmdBitwiseRotateRight
      key_handlers[Keycode.QUOTE+SHIFT]     = CmdToggleClipboard
      key_handlers[Keycode.A]               = CmdApply
      key_handlers[Keycode.A+SHIFT]         = CmdApplyAll
      key_handlers[Keycode.C]               = Cmd( CropState )
      key_handlers[Keycode.D]               = CmdDelete
      key_handlers[Keycode.E]               = CmdMerge
      key_handlers[Keycode.F]               = CmdFlipH
      key_handlers[Keycode.F+SHIFT]         = CmdFlipV
      key_handlers[Keycode.N]               = CmdParseJoinH
      key_handlers[Keycode.N+SHIFT]         = CmdParseJoinV
      key_handlers[Keycode.P]               = CmdPasteAfter
      key_handlers[Keycode.P+SHIFT]         = CmdPasteBefore
      key_handlers[Keycode.PERIOD]          = CmdRepeatLast
      key_handlers[Keycode.Q]               = CmdMacro
      key_handlers[Keycode.R]               = CmdRotateCW
      key_handlers[Keycode.R+SHIFT]         = CmdRotateCCW
      key_handlers[Keycode.R+SHIFT+CONTROL] = CmdRedo
      key_handlers[Keycode.U]               = CmdUndo
      key_handlers[Keycode.U+SHIFT]         = CmdRedoU
      key_handlers[Keycode.Y]               = CmdYank
      key_handlers[Keycode.Z]               = CmdZoomIn
      key_handlers[Keycode.Z+SHIFT]         = CmdZoomOut

    method on( e:KeyEvent )
      if (e.is_press)
        if (not e.is_shift_pressed and e.keycode >= Keycode.NUMBER_0 and e.keycode <= Keycode.NUMBER_9)
          if (e.is_press(Keycode.NUMBER_0) and not Vimage.repeat_count)
            Vimage.execute( CmdResetZoom )
            return
          endIf
          local digit = (e.keycode - Keycode.NUMBER_0)
          local n = which{ Vimage.repeat_count || 0 } * 10 + digit
          Vimage.repeat_count = n
          if (Vimage.recording_macro) Vimage.macro.add( CmdSetRepeatCount(n) )
          StatusBar.builder.[clear, print(Vimage.repeat_count.value), flush]
          StatusBar.request_redraw
          return
        endIf

        if (e.is_press(Keycode.ESCAPE) and Vimage.repeat_count)
          Vimage.repeat_count = null
          if (Vimage.recording_macro) Vimage.macro.add( CmdSetRepeatCount(null) )
          StatusBar.builder.[clear,flush]
          StatusBar.request_redraw
          return
        endIf
      endIf

      prior.on( e )

endClass

class ImageListState : StandardState [singleton]
  METHODS
    method init
      prior.init
      key_handlers[Keycode.NUMBER_3+SHIFT]  = CmdPanToLeftAndEnterZoomMode
      key_handlers[Keycode.NUMBER_4+SHIFT]  = CmdPanToRightAndEnterZoomMode
      key_handlers[Keycode.G]       = CmdGoToFirstImage
      key_handlers[Keycode.G+SHIFT] = CmdGoToLastImage
      key_handlers[Keycode.J]       = CmdImageListNext
      key_handlers[Keycode.K]       = CmdImageListPrevious
      key_handlers[Keycode.J+SHIFT] = CmdImageListShiftDown
      key_handlers[Keycode.K+SHIFT] = CmdImageListShiftUp
      key_handlers[Keycode.H]       = CmdScroll( -0.5, 0 )
      key_handlers[Keycode.L]       = CmdScroll(  0.5, 0 )

    method on_enter
      Vimage.repeat_count = null
      if (Vimage.recording_macro) Vimage.macro.add( CmdSetRepeatCount(null) )

      ImageList.is_dim = false
      ImageList.request_redraw

      status = ""

    method state_name->String
      return "IMAGE LIST"
endClass

class ZoomState : StandardState [singleton]
  METHODS
    method init
      prior.init
      key_handlers[Keycode.NUMBER_3+SHIFT]  = CmdPanToLeft
      key_handlers[Keycode.NUMBER_4+SHIFT]  = CmdPanToRight
      key_handlers[Keycode.G]       = CmdPanToTop
      key_handlers[Keycode.G+SHIFT] = CmdPanToBottom
      key_handlers[Keycode.H]       = CmdScroll(-0.5, 0.0 )
      key_handlers[Keycode.J]       = CmdScroll( 0.0, 0.5 )
      key_handlers[Keycode.K]       = CmdScroll( 0.0,-0.5 )
      key_handlers[Keycode.L]       = CmdScroll( 0.5, 0.0 )
      key_handlers[Keycode.ESCAPE]  = CmdEscapeToImageListState

    method on_enter
      Vimage.repeat_count = null
      if (Vimage.recording_macro) Vimage.macro.add( CmdSetRepeatCount(null) )

      ImageList.is_dim = true
      ImageList.request_redraw
      StatusBar.request_redraw


    method state_name->String
      return "ZOOM"
endClass

class CropState : StandardState [singleton]
  METHODS
    method init
      prior.init
      key_handlers[Keycode.NUMBER_3+SHIFT] = CmdPanToLeft
      key_handlers[Keycode.NUMBER_4+SHIFT] = CmdPanToRight
      key_handlers[Keycode.G]       = CmdPanToTop
      key_handlers[Keycode.G+SHIFT] = CmdPanToBottom
      key_handlers[Keycode.J]       = CmdCrop( 0, 0, 0, 1)
      key_handlers[Keycode.K]       = CmdCrop( 0, 1, 0, 0)
      key_handlers[Keycode.H]       = CmdCrop( 1, 0, 0, 0)
      key_handlers[Keycode.L]       = CmdCrop( 0, 0, 1, 0)
      key_handlers[Keycode.J+SHIFT] = CmdCrop( 0, 0, 0,-1)
      key_handlers[Keycode.K+SHIFT] = CmdCrop( 0,-1, 0, 0)
      key_handlers[Keycode.H+SHIFT] = CmdCrop(-1, 0, 0, 0)
      key_handlers[Keycode.L+SHIFT] = CmdCrop( 0, 0,-1, 0)
      key_handlers[Keycode.T]       = CmdTrim
      key_handlers[Keycode.ESCAPE]  = CmdEscapeToImageListState

    method on_enter
      status = "c (crop mode - h/j/k/l, H/J/K/L, t:trim)"

      ImageList.is_dim = true
      ImageList.request_redraw
      StatusBar.request_redraw

    method state_name->String
      return "CROP"
endClass

class EnterCmdLineState : State
  METHODS
    method find_commands( keyword:String, &allow_partial, &use_alternate )->CmdLineHandler[]
      local cmds = CmdLineHandler[]

      if (keyword.count and keyword[0].is_number)
        cmds.add( CmdLineSelectIndex(keyword->Int) )
        return cmds
      endIf

      forEach (cmd in VimageUI.cmd_line_handlers)
        contingent
          sufficient (cmd.keyword == keyword)
          sufficient (allow_partial and cmd.keyword.begins_with(keyword))
          necessary  (use_alternate and cmd.alternate == keyword)
        satisfied
          cmds.add( cmd )
        endContingent
      endForEach

      return cmds

    method on( e:KeyEvent )
      if (e.is_press)
        if (e.is_press(Keycode.ESCAPE))
          cancel
        elseIf (e.unicode >= 33 and e.unicode != 127)
          VimageUI.command.print e.unicode
          update_status( VimageUI.command )
        elseIf (e.keycode == Keycode.BACKSPACE or e.keycode == Keycode.DELETE)
          if (VimageUI.command.count)
            VimageUI.command.remove_last
            update_status( VimageUI.command )
          endIf
        elseIf (e.keycode == Keycode.SPACE or e.keycode == Keycode.TAB or e.keycode == Keycode.ENTER)
          if (VimageUI.command.count == 0)
            if (e.keycode == Keycode.ENTER) cancel
            return
          endIf

          local cmds = find_commands( VimageUI.command.before_first(' ') )
          if (not cmds.count)
            cmds = find_commands( VimageUI.command.before_first(' '), &allow_partial )
            if (cmds.count != 1)
              cmds = find_commands( VimageUI.command.before_first(' '), &use_alternate )
            endIf
          endIf

          which (cmds.count)
            case 0
              if (e.keycode == Keycode.SPACE)
                VimageUI.command.print ' '
              elseIf (e.keycode != Keycode.TAB)
                state = ImageListState
                set_status( "[invalid command]" )
              endIf

            case 1
              local keyword = VimageUI.command.before_first(' ')
              local args = VimageUI.command.after_first( ' ' ).trimmed

              if (keyword == cmds.first.keyword)
                if (e.keycode == Keycode.TAB)
                  cmds.first.on_tab
                else
                  VimageUI.command.print ' '
                endIf
                update_status( VimageUI.command )
              else
                VimageUI.command.clear
                VimageUI.command.print cmds.first.keyword
                VimageUI.command.print ' '
                VimageUI.command.print args
                update_status( VimageUI.command )
              endIf

              if (e.keycode == Keycode.ENTER)
                state = ImageListState
                cmds.first.execute( args )
              endIf

            others
              noAction
          endWhich
        endIf
      endIf

    method state_name->String
      return "COMMAND LINE"

    method update_status( cmd_line:String )
      use builder = StatusBar
        builder.print ':'

        local cursor_pos = builder.cursor + XY( cmd_line.count+1, 0 )

        local keyword = cmd_line.before_first(' ')
        local args = cmd_line.after_first(' ')
        local cmds = find_commands( keyword, &allow_partial=not cmd_line.contains(' '), &use_alternate )

        which (cmds.count)
          case 0
            if (cmd_line.trimmed.count > 0)
              builder.print keyword
              if (args.count)
                builder.print ' '
                builder.print args
              endIf
              builder.print ' '
              builder.style.dim
              builder.print " [invalid command]"
              builder.style.dim_off
            endIf

          case 1
            local cmd = cmds.first
            builder.print keyword
            if (cmd.keyword.begins_with(keyword) and not args.count)
              builder.style.dim
              forEach (i in keyword.count..<cmd.keyword.count)
                builder.print cmd.keyword[i]
              endForEach
              builder.style.dim_off
            endIf

            if (args.count)
              builder.print ' '
              builder.print args
            endIf

            if local syntax = cmd.syntax(args)
              if (syntax.count)
                builder.print ' '
                builder.style.dim
                builder.print syntax
                builder.style.dim_off
              endIf
            endIf

          others
            builder.print keyword
            builder.print ' '
            builder.style.dim
            builder.print '['
            forEach (cmd at i in cmds)
              if (i > 0) builder.print '|'
              builder.print cmd.keyword
            endForEach
            builder.print ']'
            builder.style.dim_off
        endWhich

        local ch = builder[cursor_pos]
        ch.style.flags |= CharacterStyle.INVERSE
        builder[cursor_pos] = ch

      endUse
endClass

