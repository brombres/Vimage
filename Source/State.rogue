module Vimage

class State
  DEFINITIONS
    SHIFT   = (1:<<:16)
    CONTROL = (2:<<:16)
    ALT     = (4:<<:16)
    OS      = (8:<<:16)

  GLOBAL PROPERTIES
    current = State()

  GLOBAL METHODS
    method change_state( new_state:State )
      current.set_state( new_state )

  PROPERTIES
    key_handlers = [Int32:KeyHandler]
    key_handlers_2 = [Int32:Cmd]

  METHODS
    method cancel
      state = ImageListState
      set_status( "[cancelled]", &dim )

    method execute( cmd:Cmd )
      Vimage.execute( cmd )

    method on( e:KeyEvent )
      if (e.is_press)
        if local handler = key_handlers[ (e.modifier_key_state:<<:16) | e.keycode ]
          handler.on( e )
          return
        endIf
        if local handler = key_handlers_2[ (e.modifier_key_state:<<:16) | e.keycode ]
          handler.on( e )
          return
        endIf
      endIf

    method on_enter
      noAction

    method on_leave
      noAction

    method set_state( new_state:State )
      current.on_leave
      current = new_state
      current.on_enter

    method set_status( text:String, &dim )
      use builder = StatusBar
        if (dim) builder.style.dim
        builder.print text
        if (dim) builder.style.dim_off
      endUse

    method state_name->String
      return ""
endClass

class StandardState : State
  METHODS
    method init
      key_handlers_2[Keycode.SEMICOLON+SHIFT] = CmdBeginCommandLine
      key_handlers_2[Keycode.D]               = Cmd( DState )
      key_handlers_2[Keycode.F]             = CmdFlipH
      key_handlers_2[Keycode.F+SHIFT]       = CmdFlipV
      key_handlers_2[Keycode.N]               = CmdParseJoinH
      key_handlers_2[Keycode.N+SHIFT]         = CmdParseJoinV
      key_handlers_2[Keycode.P]               = CmdPaste
      key_handlers_2[Keycode.PERIOD]          = CmdRepeatLast
      key_handlers[Keycode.Q]               = KeyHandlerQBuffer
      key_handlers_2[Keycode.R]             = CmdRotateCW
      key_handlers_2[Keycode.R+SHIFT]       = CmdRotateCCW
      key_handlers_2[Keycode.U]             = CmdUndo
      key_handlers[Keycode.Y]               = KeyHandler( YState )
      key_handlers_2[Keycode.Z]             = CmdZoomIn
      key_handlers_2[Keycode.Z+SHIFT]       = CmdZoomOut
endClass

class ImageListState : StandardState [singleton]
  METHODS
    method init
      prior.init
      key_handlers_2[Keycode.J]       = CmdImageListNext
      key_handlers_2[Keycode.K]       = CmdImageListPrevious
      key_handlers_2[Keycode.J+SHIFT] = CmdImageListShiftDown
      key_handlers_2[Keycode.K+SHIFT] = CmdImageListShiftUp
      key_handlers_2[Keycode.T]       = CmdParseStack

    method on( e:KeyEvent )
      if (e.is_press)
        if (e.keycode >= Keycode.NUMBER_0 and e.keycode <= Keycode.NUMBER_9)
          local digit = (e.keycode - Keycode.NUMBER_0)
          if (Vimage.repeat_count)
            Vimage.repeat_count = Vimage.repeat_count.value * 10 + digit
          else
            Vimage.repeat_count = digit
            StatusBar.builder.clear
          endIf
          StatusBar.builder.print digit
          StatusBar.request_redraw
          return
        endIf
      endIf
      prior.on( e )

    method on_enter
      Vimage.repeat_count = null

    method state_name->String
      return "IMAGE LIST"
endClass

class ZoomState : StandardState [singleton]
  METHODS
    method init
      prior.init
      key_handlers[Keycode.H]      = KeyHandler( (e) => Vimage::ImageView.scroll(RealXY(-0.5,0)) )
      key_handlers[Keycode.J]      = KeyHandler( (e) => Vimage::ImageView.scroll(RealXY(0,0.5)) )
      key_handlers[Keycode.K]      = KeyHandler( (e) => Vimage::ImageView.scroll(RealXY(0,-0.5)) )
      key_handlers[Keycode.L]      = KeyHandler( (e) => Vimage::ImageView.scroll(RealXY(0.5,0)) )
      key_handlers[Keycode.ESCAPE] = KeyHandler( ImageListState )

    method on( e:KeyEvent )
      if (e.is_press)
        if (e.keycode >= Keycode.NUMBER_0 and e.keycode <= Keycode.NUMBER_9)
          local digit = (e.keycode - Keycode.NUMBER_0)
          if (Vimage.repeat_count)
            Vimage.repeat_count = Vimage.repeat_count.value * 10 + digit
          else
            Vimage.repeat_count = digit
            StatusBar.builder.clear
          endIf
          StatusBar.builder.print digit
          StatusBar.request_redraw
          return
        endIf
      endIf
      prior.on( e )

    method on_enter
      Vimage.repeat_count = null
      ImageList.is_dim = true
      ImageList.request_redraw
      StatusBar.request_redraw

    method on_leave
      ImageList.is_dim = false
      ImageList.request_redraw
      StatusBar.request_redraw

    method state_name->String
      return "ZOOM"
endClass

class EnterCmdLineState : State
  METHODS
    method find_commands( keyword:String, &allow_partial )->CmdLineHandler[]
      local cmds = CmdLineHandler[]
      forEach (cmd in VimageUI.cmd_line_handlers)
        if (cmd.keyword == keyword or (allow_partial and cmd.keyword.begins_with(keyword)))
          cmds.add( cmd )
        endIf
      endForEach
      return cmds

    method on( e:KeyEvent )
      if (e.is_press)
        if (e.is_press(Keycode.ESCAPE))
          cancel
        elseIf (e.unicode >= 33 and e.unicode != 127)
          VimageUI.command.print e.unicode
          update_status( VimageUI.command )
        elseIf (e.keycode == Keycode.BACKSPACE or e.keycode == Keycode.DELETE)
          if (VimageUI.command.count)
            VimageUI.command.remove_last
            update_status( VimageUI.command )
          endIf
        elseIf (e.keycode == Keycode.SPACE or e.keycode == Keycode.TAB or e.keycode == Keycode.ENTER)
          if (VimageUI.command.count == 0)
            if (e.keycode == Keycode.ENTER) cancel
            return
          endIf

          local cmds = find_commands( VimageUI.command.before_first(' '),
              &allow_partial=not VimageUI.command.contains(' ') )
          which (cmds.count)
            case 0
              if (e.keycode == Keycode.SPACE)
                VimageUI.command.print ' '
              elseIf (e.keycode != Keycode.TAB)
                state = ImageListState
                set_status( "[invalid command]" )
              endIf

            case 1
              local keyword = VimageUI.command.before_first(' ')
              local args = VimageUI.command.after_first( ' ' ).trimmed

              if (keyword == cmds.first.keyword)
                VimageUI.command.print ' '
              else
                VimageUI.command.clear
                VimageUI.command.print cmds.first.keyword
                VimageUI.command.print ' '
                VimageUI.command.print args
                update_status( VimageUI.command )
              endIf

              if (e.keycode == Keycode.ENTER)
                state = ImageListState
                cmds.first.execute( args )
              endIf

            others
              noAction
          endWhich
        endIf
      endIf

    method update_status( cmd_line:String )
      use builder = StatusBar
        builder.print ':'

        local keyword = cmd_line.before_first(' ')
        local args = cmd_line.after_first(' ')
        local cmds = find_commands( keyword )

        which (cmds.count)
          case 0
            if (cmd_line.trimmed.count > 0)
              builder.print keyword
              if (args.count)
                builder.print ' '
                builder.print args
              endIf
              builder.print ' '
              builder.style.dim
              builder.print " [invalid command]"
              builder.style.dim_off
            endIf

          case 1
            local cmd = cmds.first
            builder.print keyword
            builder.style.dim
            builder.print cmd.keyword[ forEach in keyword.count..<cmd.keyword.count ]
            builder.style.dim_off

            if (args.count)
              builder.print ' '
              builder.print args
            endIf

            if (cmd.syntax and cmd.syntax.count)
              builder.print ' '
              builder.style.dim
              builder.print cmd.syntax
              builder.style.dim_off
            endIf

          others
            builder.print keyword
            builder.print ' '
            builder.style.dim
            builder.print '['
            forEach (cmd at i in cmds)
              if (i > 0) builder.print '|'
              builder.print cmd.keyword
            endForEach
            builder.print ']'
            builder.style.dim_off
        endWhich

      endUse
endClass

class DState : State [singleton]
  METHODS
    method on_enter
      use status = StatusBar
        status.print 'd'
        status.style.dim
        status.print "[d]"
        status.style.dim_off
      endUse

    method on( e:KeyEvent )
      if (e.is_press)
        if (e.keycode == Keycode.ESCAPE)
          cancel
        elseIf (e.unicode == 'd')
          execute( CmdDD )
          state = ImageListState
        else
          set_status( "[invalid command 'd$']"(e.unicode) )
          state = ImageListState
        endIf
      endIf
endClass

class YState : State [singleton]
  METHODS
    method on_enter
      use status = StatusBar
        status.print 'y'
        status.style.dim
        status.print "[p|y]"
        status.style.dim_off
      endUse

    method on( e:KeyEvent )
      if (e.is_press)
        if (e.keycode == Keycode.ESCAPE)
          cancel
        elseIf (e.unicode == 'y')
          execute( CmdYY )
          state = ImageListState
        elseIf (e.unicode == 'p')
          execute( CmdYP )
          state = ImageListState
        else
          set_status( "[invalid command 'y$']"(e.unicode) )
          state = ImageListState
        endIf
      endIf
endClass
